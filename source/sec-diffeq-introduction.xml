<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      Mathematical Models in Biology         -->
<!--                                              -->
<!-- Copyright (C) 2017  D. Brian Walton          -->
<!-- See the file COPYING for copying conditions. -->
   
<section xml:id="intro-differential-equations">
<title>Introduction to Differential Equations</title>

<introduction>
    <p>
        Sequences give us a way to model values at specific evenly spaced times.
        However, they do not provide a method to model values between those times.
        Furthermore, discrete time projeciton models are based on using the values of the state variables at one instant in time to predict a future value one time interval later.
        That is, the increment of change is considered to be a single bulk change in values.
    </p>
    <p>
        We often want to consider models that allow us to predict values for a state at <em>any</em> time.
        We want to have the model describe how the state is changing continuously throughout time, rather than one bulk increment of change.
        The most basic mathematical tool to model continuous functions is a <term>differential equation</term>.
    </p>
</introduction>
    
    <subsection xml:id='subsec-diffeq-rates-of-change'>
    <title>Rates of Change</title>

    <p>
        In order to motivate differential equations, let us think back to population models where the population changed according to births and deaths.
        For discrete time models, we established functions that described <em>how many</em> births or deaths to add over the course of a cycle.
        Such a function represented the total accumulated births or deaths, regardless of exactly when those events occurred.
        For a continuous time model, we instead think in terms of the rate at which births and deaths are occurring.
    </p>
    <p>
        A <term>rate of change</term> represents the ratio between the changes of two covarying variables.
        One of the simplest examples is velocity which is the rate of change of distance traveled with respect to time, for which you probably have heard the saying, <dq>distance equals rate times time.</dq>
        Mathematically, this is saying that the distance traveled is <em>proportional</em> to the time spent travelling and the rate (velocity) is the proportionality constant.
        However, this is technically only true for constant rates of change.
        Calculus introduced the <term>derivative</term> as the mathematical quantity that measures the <term>instantaneous rate of change</term>.
        This rate of change results from the idea of computing the limit of an average rate of change.
    </p>
    <p>
        Consider a quantity <m>Q</m> that is a function of time <m>t</m>.
        The instantaneous rate of change of <m>Q</m> with respect to <m>t</m> at a particular moment <m>t=a</m> is defined as the derivative
        <me> \left. \frac{dQ}{dt} \right|_a = \lim_{\Delta t \to 0} \frac{Q(a+\Delta t) - Q(a)}{\Delta t}</me>.
        Thinking of this in reverse, this is telling us that the value <m>Q(a + \Delta t)</m> can approximately be found as
        <me> Q(a + \Delta t) \approx Q(a) + \left.\frac{dQ}{dt}\right|_a \cdot \Delta t</me>.
        That is, the increment of change in <m>Q</m> is approximately just the derivative times the increment of time.
        The approximation improves as the increment of time decreases and is exact in the limit.
    </p>
    <p>
        Returning to our ideas of births and deaths, this suggests that instead of thinking of the total number of births and deaths in a given time period (e.g., per year), we will think of a <em>rate</em> of births or deaths <em>per unit time</em> so that in a <em>short</em> interval of time, the <em>number</em> of births or deaths is approximately that corresponding rate times the length of the time interval.
    </p>
    </subsection>
    
    <subsection xml:id='differential-equations'>
        <title>Differential Equations</title>
        
        <p>
            A differential equation is an equation that defines the rate of change (a derivative) for a quantity.
            Unlike calculus where we would start with a function's formula and use rules of calculus to find the derivative's formula, in modeling we are going to think of the rate of change as a state variable that can be part of an equation.
        </p>
        <example>
            <statement>
                <p>
                    We know that a population that is not constrained by its environment tends to grow exponentially.
                    That is, we can think of the population as a function of time <m>P(t)</m> as satisfying an exponential model,
                    <me>P(t) = Ae^{rt}</me>,
                    where <m>A</m> and <m>r</m> are appropriate constants.
                    The rate of change with respect to time can be calculated using calculus rules to find
                    <me>P'(t) = Are^{rt}</me>.
                </p>
                <p>
                    We can identify a relation between the state variables of <m>P</m> and <m>P'</m> by calculating the ratio <m>P' / P</m> and simplifying.
                    Since <m>P'</m> is the overall rate of change and <m>P</m> is the population, the ratio refers to the <term>per capita rate of change</term>.
                    Using the exponential formula and its derivative, we discover that an exponentially growing (or decaying) population satisfies the equation
                    <me>\frac{P'}{P} = \frac{Are^{rt}}{Ae^{rt}} = r</me>.
                    Exponential growth exactly corresponds to having a constant per capita rate of change.
                    That is, we have a differential equation
                    <me>P' = r P</me>
                    that corresponds to a population model <m>P(t) = Ae^{rt}</m>.
                </p>
            </statement>
        </example>

        <p>Differential equations in modeling occur when the formula that defines the rate of change is a function involving the dependent variable and not just the independent variable. To identify a unique solution, we also need an initial value.</p>
        <example>
            <p>The differential equation <m>\frac{dP}{dt} = 3 P</m> defines the rate of change <m>\frac{dP}{dt}</m> using a formula involving the <em>dependent</em> variable <m>P</m>. Recall that the exponential function <m>P = e^{3t}</m> has this behavior since <m>\frac{dP}{dt} = 3e^{3t}</m>. That is, since <m>P=e^{3t}</m>, we have just discovered that <m>3P</m> and <m>\frac{dP}{dt}</m> are the same, which is precisely what the equation <m>\frac{dP}{dt} = 3P</m> means.</p>
            <p>In fact, <m>P=Ae^{3t}</m> will be a solution for any value of <m>A</m>. The derivative, <m>\frac{dP}{dt}</m> for this formula will be <me>\frac{dP}{dt} = \frac{d}{dt}[Ae^{3t}] = A \cdot 3e^{3t} = 3(Ae^{3t}) = 3P.</me> The value of <m>A</m> depends on the initial value for the function.</p>
        </example>
    </subsection>
    
    <subsection xml:id='numerical-solutions-diffeq'>
        <title>Solutions to Differential Equations</title>
        <p>There are many strategies for trying to solve differential equations. These strategies are taught in courses exclusively about differential equations. Our emphasis will be on creating models using differential equations and understanding the behavior of the solutions without requiring formulas as solutions. The following theorem guarantees that a differential equation with an initial value has a unique solution under reasonable conditions.</p>
        <theorem xml:id='thm-diffeq-existence-uniqueness'>
            <title>Existence and Uniqueness of Initial Value Problems</title>
            <statement>
                <p>Suppose that <m>F(t,y)</m> represents a continuous function of both <m>t</m> and <m>y</m> such that <m>\frac{\partial F}{\partial y}</m> exists and is bounded (i.e., small changes in <m>y</m> should result in small changes in <m>F(t,y)</m>. Then the differential equation <me>\frac{dy}{dt} = F(t,y)</me> with initial value <m>y(a) = b</m> has a unique solution for some interval <m>t \in (a-\epsilon, a+\epsilon)</m> with <m>\epsilon \gt 0</m>.</p>
            </statement>
            <proof>
                <p>The proof is outside the scope of this text but is based on the convergence of approximations.</p>
            </proof>
        </theorem>
        <p>Note that the existence-uniqueness theorem only guarantees that a solution will exist on an interval near the initial value. Sometimes, solutions exist on very short intervals. If the value of the function <m>F(t,y)</m> is very large, then the solution might run away to infinity. Other times, solutions might exist for all real numbers. The uniqueness property indicates that for any initial value, there can only be one solution. </p>
        <p>Knowing that solutions exist, even if we can't find their formulas, we can turn to computers to help us approximate their values using numerical algorithms. One common numerical method will be to approximate the value of the solution at specific values. (Asking for the entire function is usually too much.) The following Sage examples illustrate how we might find such approximations.</p>
        
        <example>
            <p>Find numerical approximations for the solution of the differential equation <me>\frac{dy}{dt} = 20-4y</me> with various initial values <m>y(0)=y_0</m>. The Sage script below allows you to vary the initial value and create a table of approximating values as well as generate a graph of the approximation.</p>
            <sage>
                <input>
                # Declare the variables, independent and dependent
                var('t,y')
                
                # Rate formula: dydt is just a name and has no special meaning
                dydt = 20-4*y
                
                # Initial value (t0,y0)
                t0 = 0
                y0 = 4
                
                # Range of time to use in approximation
                interval = [-2,4]
                dt = 0.1   # Spacing between approximated points
                
                showTable = True   # Change if not wanted
                showEvery = 10     # In a table, might not want all points
                showPlot = True     # Change if not wanted
                yLimits = [-20,20]  # In a plot, set the window limits
                
                # Numerically solve the differential equation
                solution = desolve_rk4(
                            dydt,        # The rate formula
                            y,           # The dependent variable
                            ics=[0,y0],  # The initial condition as pair (t0,y0)
                            ivar=t,      # The independent variable
                            end_points=interval,     # Interval of solution
                            step=dt,  # Space between points
                          )
                if showTable:
                    for i in range(0, len(solution), showEvery):
                        print('%f\t%f' % (solution[i][0], solution[i][1]))
                if showPlot:
                    solutionPlot = list_plot(solution, plotjoined=True)
                    initialPoint = list_plot([[t0,y0]], size=50)
                    show(solutionPlot+initialPoint, 
                        ymin=yLimits[0],ymax=yLimits[1], axes_labels=["t","y"])
                </input>
            </sage>
        </example>
    </subsection>
    
    <subsection xml:id='slope-fields'>
        <title>Slope Fields</title>
        
        <p>In addition to solving the differential equation numerically, we can explore a differential equation graphically through a plot called a <term>slope field</term>. Although a differential equation could be any equation that involves the derivative, in modeling we usually think of a differential equation in the form presented in the existence<ndash/>uniqueness theorem where the derivative is equal to an expression that depends on the independent and dependent variables, such as <me>\frac{dy}{dt} = F(t,y).</me> Because the value of the derivative represents a slope, this equation allows us to define what the slope would be at every point in the <m>(t,y)</m>-plane.</p>
        
        <definition xml:id='defn-slope-field'>
            <title>Slope Field</title>
            <statement>
                <p>A slope field is a geometric representation of a differential equation wherein every point <m>(t,y)</m> in the plane is represented by a line segment at that point having the slope <m>\frac{dy}{dt}=F(t,y)</m>. Because every point is impossible to visualize, in practice the graph only shows the slope field at points on a grid of equally spaced points.</p>
            </statement>
        </definition>
        
        <p>The solution to a differential equation <m>\frac{dy}{dt}=F(t,y)</m> with an initial value <m>y(t_0)=y_0)</m> will be a function whose graph includes the point <m>(t_0,y_0)</m> and then at every point has a tangent line that has the same slope as the slope field at that point. This means that the curve follows the direction of the arrows.</p>
        <p>Computer packages allow us to easily generate slope fields. Evaluate the following Sage scripts to see a variety of different examples.</p>
        
        <example>
            <p>The differential equation <m>\frac{dy}{dt} = 3</m> has a rate formula <m>F(t,y)=3</m> that is constant. This means that every point has the same slope. Solutions will follow straight lines.</p>
            <sage>
                <input>
                var('t,y')  # Declare the mathematical variables
                F(t,y) = 3  # Define the rate formula
                (tmin,tmax) = (-2,4)
                (ymin, ymax) = (-4,4)
                slopefield = plot_slope_field(F(t,y),   # give the rate
                    (t,tmin,tmax), (y,ymin,ymax),       # specify the axes
                    headlength=4, headaxislength=4)     # extra format options
                show(slopefield, figsize=[4,3])
                </input>
            </sage>
            <p>Note that there are infinitely many different solutions corresponding to a family of parallel lines with slope 3. Given any particular point (initial value), there will only be one of those lines passing through the point. That is the uniqueness of solutions of differential equations.</p>
        </example>

        <example>
            <p>The differential equation <m>\frac{dy}{dt} = 3t^2-4</m> has a rate formula <m>F(t,y)=3t^2-4</m>. The rate formula in this case depends only on the independent variable <m>t</m>. You should notice that the slope is the same at points that are on the same vertical line, <m>t=a</m>.</p>
            <sage>
                <input>
                var('t,y')  # Declare the mathematical variables
                F(t,y) = 3*t^2-4  # Define the rate formula
                (tmin,tmax) = (-4,4)
                (ymin, ymax) = (-4,4)
                slopefield = plot_slope_field(F(t,y),   # give the rate
                    (t,tmin,tmax), (y,ymin,ymax),       # specify the axes
                    headlength=4, headaxislength=4)     # extra format options
                
                initialValues = [ [0,1], [0,0], [0,-1] ]
                colors = rainbow(len(initialValues))
                trajectoryPlot = Graphics()
                for i in range(len(initialValues)):
                    # Find the solution
                    point = initialValues[i]
                    solution = desolve_rk4(
                                F(t,y),
                                y,
                                ics=point,  # Use the selected point
                                ivar=t,
                                end_points=[tmin,tmax],
                                step=0.05,
                              )
                    # Add the trajectory to the plot
                    trajectoryPlot += list_plot(solution, 
                        color=colors[i], plotjoined=True)
                    trajectoryPlot += list_plot([point], color=colors[i])
                show(slopefield+trajectoryPlot,
                    ymin=ymin, ymax=ymax, figsize=[4,3])
                </input>
            </sage>
            <p>In calculus, we learned that <m>\frac{dy}{dt}=3t^2-4</m> can be solved for <m>y</m> using antiderivatives, where we get <m>y=t^3-4t+C</m>, where <m>C</m> is a constant of integration. This corresponds to a horizontal translation or shift, which is the appropriate analogue for the parallel lines in the first example. That is, we should think of the lines in the first example as vertical shifts of one another.</p>
        </example>

        <example>
            <p>The differential equation <m>\frac{dy}{dt} = 3y^2-4</m> has a rate formula <m>F(t,y)=3y^2-4</m>. The rate formula uses the same operations as the previous example but in terms of the dependent variable <m>y</m>. You should notice that the slope is the same at points that are on the same horizontal line <m>y=b</m>.</p>
            <sage>
                <input>
                var('t,y')  # Declare the mathematical variables
                F(t,y) = 3*y^2-4  # Define the rate formula
                (tmin,tmax) = (-2,2)
                (ymin, ymax) = (-4,4)
                slopefield = plot_slope_field(F(t,y),   # give the rate
                    (t,tmin,tmax), (y,ymin,ymax),       # specify the axes
                    headlength=4, headaxislength=4)     # extra format options
                
                initialValues = [ [0,1.5], [0,1], [0,0], [0,-1], [0,-2] ]
                colors = rainbow(len(initialValues))
                trajectoryPlot = Graphics()
                for i in range(len(initialValues)):
                    # Find the solution
                    point = initialValues[i]
                    solution = desolve_rk4(
                                F(t,y),
                                y,
                                ics=point,  # Use the selected point
                                ivar=t,
                                end_points=[tmin,tmax],
                                step=0.05,
                              )
                    # Add the trajectory to the plot
                    trajectoryPlot += list_plot(solution, 
                        color=colors[i], plotjoined=True)
                    trajectoryPlot += list_plot([point], color=colors[i])
                show(slopefield+trajectoryPlot,
                    ymin=ymin, ymax=ymax, figsize=[4,3])
                </input>
            </sage>
            <p>Notice that solutions are no longer vertical translations or shifts of one another. However, you should see that every solution will have corresponding solutions that are <em>horizontal translations</em>. Different curves correspond to different initial conditions. In this example, we can see that there are three basic classes of solutions. Above a certain point, the graphs grow without bound and head to infinity at some finite time. (This is an example of why the existence<ndash/>uniqueness theorem only guaranteed a solution for a limited interval.) Between two values that we will soon learn are equilibrium solutions, solutions form a transition from the upper equilibrium (unstable) to the lower equilibrium (stable). Solutions that begin below the lower equilibrium all rise and asymptotically approach the stable equilibrium.</p>
        </example>

        <example>
            <p>The differential equation <m>\frac{dy}{dt} = 3y^2-4t</m> has a rate formula <m>F(t,y)=3y^2-4t</m>. Because this rate formula depends on both <m>t</m> and <m>y</m>, solutions do not share either horizontal or vertical translations.</p>
            <sage>
                <input>
                var('t,y')  # Declare the mathematical variables
                F(t,y) = 3*y^2-4*t  # Define the rate formula
                (tmin,tmax) = (-2,2)
                (ymin, ymax) = (-4,4)
                slopefield = plot_slope_field(F(t,y),   # give the rate
                    (t,tmin,tmax), (y,ymin,ymax),       # specify the axes
                    headlength=4, headaxislength=4)     # extra format options

                initialValues = [ [0,1], [0,0], [0,-1] ]
                colors = rainbow(len(initialValues))
                trajectoryPlot = Graphics()
                for i in range(len(initialValues)):
                    # Find the solution
                    point = initialValues[i]
                    solution = desolve_rk4(
                                F(t,y),
                                y,
                                ics=point,  # Use the selected point
                                ivar=t,
                                end_points=[tmin,tmax],
                                step=0.05,
                              )
                    # Add the trajectory to the plot
                    trajectoryPlot += list_plot(solution, 
                        color=colors[i], plotjoined=True)
                    trajectoryPlot += list_plot([point], color=colors[i])
                show(slopefield+trajectoryPlot,
                    ymin=ymin, ymax=ymax, figsize=[4,3])
                </input>
            </sage>
            <p></p>
        </example>
    </subsection>
</section>