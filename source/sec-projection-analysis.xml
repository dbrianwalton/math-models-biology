<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      Mathematical Models in Biology         -->
<!--                                              -->
<!-- Copyright (C) 2017  D. Brian Walton          -->
<!-- See the file COPYING for copying conditions. -->
   
<section xml:id="projection-analysis">
<title>Analysis of Population Projections</title>

<introduction>
    <p>When we introduced projection functions that define a sequence recursively, <m>x_{n+1} = f(x_n)</m>, we discussed the relationship between fixed points of the projection function and equilibria of the sequence being studied. In this section, we will consider the analysis of projection functions in order to study the stability of equilibria. A stable equilibrium is likely to be observed in a physical setting. An unstable equilibrium is unlikely to be observed as small deviations from equilibrium push the system away from the steady state.</p>
    
    <p>We will first consider a prototype example, where the projection function is a linear function. That system generalizes the geometric sequence related to constant per capita growth. For more complex models, we will then discuss using a linear approximation near the fixed point (i.e., a tangent line) to analyze equilibrium stability. We conclude with a graphical representation of sequences generated by projection functions that is commonly referred to as a cobweb diagram.</p>
</introduction>
    
<subsection xml:id='linear-projection-analysis'>
    <title>Linear Projection Functions</title>
    
    <p>We begin by considering the consequence of using a linear function as a projection function. Mathematics texts usually introduce linear functions using the slope<ndash/>intercept form, <m>f(x)=mx+b</m> where <m>m</m> and <m>b</m> are model parameters (slope and intercept). However, we will more frequently use the point<ndash/>slope form, <m>f(x)=m(x-a)+b</m>, which has slope <m>m</m> and passes through a point <m>(a,b)</m>, or more precisely, <m>f(a)=b</m>. As an additional warning, note in advance that we will often use symbols other than <m>m</m> to represent slope.</p>

    <example>
        <p>Consider a population model that uses a constant per capita growth rate <m>r</m> for which we introduce an emigration term that is constant, say <m>E_{n} = m</m> (for migration). Then our population model would be <me>\hbox{New Population} = \hbox{Old Population} + \hbox{Natural Growth} - \hbox{Emigration},</me> which using sequences would be written <me>P_{n+1} = P_{n} + r \cdot P_n - m = (1+r) P_n - m.</me> The projection function for this model is linear with a slope <m>\alpha = 1+r</m> given by <me>f(x) = \alpha x - m = (1+r)x - m.</me></p>
    </example>
    
    <example>
        <statement>
            <p>Consider a population that is decreasing by 5\% per year. Suppose an intervention is established that supplements the population by 100 new individuals per year. Express a recursive sequence model for this population and identify the projection function.</p>
        </statement>
        <solution>
            <p>The recursive model for the population is motivated by the descriptive equation <me>\hbox{New Population} = \hbox{Old Population} - \hbox{Natural Losses} + \hbox{Supplements}.</me> If <m>P_n</m> is the population after <m>n</m> years, then our recursive model is <me>P_{n+1} = P_n - 0.05 P_n + 100 = 0.95 P_n + 100.</me> We identify the projection function <m>P_{n+1} = f(P_n)</m> as <me>f(x) = 0.95 x + 100,</me> which is linear with slope <m>\alpha=0.95</m>.</p>
        </solution>
    </example>

    <example>
        <statement>
            <p>A loan balance grows by <m>1/12</m> of the annual percentage rate each month. But a monthly payment reduces the loan balance. Write down a recursive model for the loan balance <m>B_n</m> where <m>n</m> is the number of months since the loan began, <m>r</m> is the annual percentage rate and <m>p</m> is the amount of the monthly payment.</p>
        </statement>
        <solution>
            <p>The recursive model for the loan balance is motivated by the descriptive equation <me>\hbox{New Balance} = \hbox{Old Balance} + \hbox{Added Interest} - \hbox{Monthly Payment}.</me> Our recursive model is <me>B_{n+1} = B_n + \frac{r}{12} B_n - m = (1+\frac{r}{12}) B_n - m.</me> The projection function <m>B_{n+1} = f(B_n)</m> as <me>f(x) = (1+\frac{r}{12}) x - m</me> is linear with slope <m>\alpha = 1+\frac{r}{12}</m>.</p>
        </solution>
    </example>
    
    <p>The first step in analysis is to identify the fixed points which we use to rewrite our function. A linear projection function <m>f(x)=\alpha x + \beta</m> for constants <m>\alpha</m> (alpha) and <m>\beta</m> (beta) has exactly one fixed point so long as <m>\alpha \ne 1</m>. Recall that a fixed point is a solution <m>x^*</m> to the equation <m>x=f(x)</m>: <md>
        <mrow>x^* = \alpha x^* + \beta</mrow>
        <mrow>x^*-\alpha x^* = \beta </mrow>
        <mrow>(1-\alpha) x^* = \beta </mrow>
        <mrow>x^* = \frac{\beta}{1-\alpha} = \frac{-\beta}{\alpha-1}.</mrow>
    </md> Because it is a fixed point, we know <m>f(x^*)=x^*</m> and the slope is <m>\alpha</m>. Rewriting <m>f(x)</m> in point<ndash/>slope form, we find the alternative representation <me>f(x) = \alpha(x-x^*) + x^*.</me></p>
    
    <p>The new representation allows us to rewrite our recursive equation for the sequence. Suppose that <m>x_n</m> refers to a sequence generated by the projection function <m>x_{n+1} = f(x_n)</m>. Using the new representation, this becomes <me>x_{n+1} = \alpha (x_n-x^*) + x^*.</me> This is equivalent to the equation <me>x_{n+1} - x^* = \alpha (x_n - x^*).</me> If we define a new sequence <m>z_n</m> as the difference between <m>x_n</m> and the fixed point <m>x^*</m>, <me>z_n = x_n - x^*,</me> then our equation is showing that the difference is a geometric sequence, <me>z_{n+1} = \alpha z_n.</me> Geometric sequences have an explicit formula <me>z_n = z_0 \cdot \alpha^n,</me> which leads to an explicit formula for <m>x_n</m> given by <me>x_n = x^* + z_n = x^* + (x_0 - x^*) \cdot \alpha^n.</me> For this reason, I call such sequences a <term>shifted geometric sequence</term>.</p>
    
    <p>Now that we have an explicit formula for our sequence, we can analyze the stability. The geometric sequence <m>z_n = z_0 \alpha^n</m> corresponds to repeated multiplication by the same number <m>\alpha</m>. When <m>\alpha \lt 0</m> (negative), the sings of <m>z_n</m> alternate between positive and negative. When <m>|\alpha| \gt 1</m>, the sequence <m>z_n</m> grows in magnitude; when <m>|\alpha| \lt 1</m>, the magnitude of <m>z_n</m> converges to zero.</p>
    
    <theorem xml:id='thm-linear-projection-stability'>
        <title>Stability of Fixed Points for Linear Projection Functions</title>
        <statement>
            <p>For a projection function <m>f(x)=\alpha x + \beta</m> with fixed point <me>\displaystyle x^* = \frac{\beta}{1-\alpha} = \frac{-\beta}{\alpha-1},</me> the stability of the fixed point as an equilibrium for a sequence defined as <m>x_{n+1} = f(x_n)</m> is determined by the value of the slope <m>\alpha</m>. <ul>
                <li>If <m>|\alpha| \lt 1</m>, then every sequence converges <m>x_n \to x^*</m> and <m>x^*</m> is a stable equilibrium.</li>
                <li>If <m>|\alpha| \gt 1</m>, then every sequence with <m>x_0 \ne x^*</m> diverges away from <m>x^*</m> and <m>x^*</m> is an <term>unstable</term> equilibrium.</li>
                <li>If <m>\alpha = -1</m>, then the sequence <m>x_n</m> alternates between two values and <m>x^*</m> is neutrally stable as the sequence does not diverge.</li>
                <li>If <m>\alpha = 1</m> and <m>\beta=0</m> (<m>f(x)=x</m>), then every number is a fixed point. If <m>\beta \ne 0</m>, then no fixed point exists.</li>
            </ul></p>
        </statement>
    </theorem>
    
    <example>
        <p>Explore the results of the theorem through the interactive activity below. The figure below includes slides with which you will be able to choose the slope <m>\alpha</m>, the initial value <m>x_0</m> and the desired fixed point <m>x^*</m>. The first few terms of the result sequence defined by <m>x_{n+1}=x^* + a (x_n - x^*)</m> with initial value <m>x_0</m> will then be shown. The equilibrium value is shown with a dashed line.</p>
        <figure>
            <caption>Graph showing a shifted geometric sequence</caption>
            <jsxgraph xml:id="jsxgraph-shifted-geometric-sequence">
                <!-- http://jsxgraph.uni-bayreuth.de/wiki/index.php/Archimedean_spiral -->
                <input>
                <![CDATA[// Store in object
                var jsx1 = {};
                jsx1.board = JXG.JSXGraph.initBoard('jsxgraph-shifted-geometric-sequence', {boundingbox: [0, 5, 10, -5], axis:true});
                jsx1.alpha = jsx1.board.create('slider', [[1,4],[6,4],[-2,0.7,2]],{name:'a'});
                jsx1.x0 = jsx1.board.create('slider', [[1,3.5],[6,3.5],[0,0.25,2]],{name:'x0'});
                jsx1.xStar = jsx1.board.create('slider', [[1,3],[6,3],[-3,1,3]],{name:'x*'});

                jsx1.pt = [];
                jsx1.pt[0] = jsx1.board.create('point', [0, function() { return jsx1.x0.Value(); }], {withLabel:false});
                for (var i=1; i<10; i++) {
                    jsx1.pt[i] = jsx1.board.create('point', [i, function() {
                        return jsx1.xStar.Value()+(jsx1.pt[this.name-1].Y() - jsx1.xStar.Value())*jsx1.alpha.Value();
                    }], {name:i, withLabel:false});
                }
                jsx1.fp = jsx1.board.create('point', [0, function(){ return jsx1.xStar.Value(); }], {visible:false});
                jsx1.fpShift = jsx1.board.create('point', [1, function(){ return jsx1.xStar.Value(); }], {visible:false});
                jsx1.board.create('line', [jsx1.fp, jsx1.fpShift], {dash:2,fixed:true});
                ]]>
                </input>
            </jsxgraph>
        </figure>
        <p>Did you observe the following features? <ul>
            <li>When <m>a \gt 1</m>, the sequence runs away from the equilibrium, staying on the same side as the initial value.</li>
            <li>When <m>0 \lt a \lt 1</m>, the sequence runs toward the equilibrium from the same side as the initial value.</li>
            <li>When <m>-1 \lt a \lt 0</m>, the sequence runs toward the equilibrium but alternating sides.</li>
            <li>When <m>a \lt -1</m>, the sequence runs away the equilibrium but alternating sides.</li>
        </ul></p>
    </example>
</subsection>

<subsection>
    <title>Linearizing Projection Functions</title>

    <p>Most functions are not linear, so it might seem that the previous results are limited to just a few special cases. However, one of the basic premises of calculus is that many functions can be approximated by linear functions locally. That linear function corresponds to the <term>tangent line</term>, which exists so long as the function is <term>differentiable</term>.</p>
    <theorem xml:id='thm-function-linearization'>
        <statement>
            <p>If a function <m>f</m> is differentiable at <m>x=c</m> (<m>f'(c)</m> exists), then we can define the linear approximation of <m>f</m> around <m>x=c</m> as the linear function with slope <m>f'(c)</m> and passing through the point <m>(c,f(c))</m> given by <me>L_{f,c}(x) = f(c) + f'(c) \cdot (x-c).</me> When <m>x</m> is sufficiently close to <m>c</m>, the functions are nearly indistinguishable.</p>
        </statement>
        <proof>
            <p>The tangent line equation is a consequence of standard calculus definitions. To clarify the idea of sufficiently close without trying to recreate an entire course in analysis, let us start by pointing out that because <m>f'(c)</m> exists, the average rate of change defined by <m>\frac{f(x)-f(c)}{x-c}</m> must converge to <m>f'(c)</m> as <m>x</m> approaches <m>c</m>, as given in the limit <me> \lim_{x \to c} \frac{f(x)-f(c)}{x-c} = f'(c).</me> This is equivalent to saying <me>\lim_{x \to c} \left(\frac{f(x)-f(c)}{x-c} - f'(c)\right) = 0.</me> This can be rewritten as <me>\lim_{x \to c} \frac{f(x)-L_{f,c}(x)}{x-c} = 0.</me> Because the denominator goes to zero, the numerator must go to zero even faster for the limit to equal zero.</p>
        </proof>
    </theorem>
    
    <p>Now, suppose that we are working with a projection function <m>f</m> with a fixed point at <m>x=x^*</m>. This means that <m>f(x^*) = x^*</m>. The tangent line of the projection function around the fixed point will be <me>L_{f,x^*}(x) = f(x^*) + f'(x^*) \cdot (x-x^*) = x^* + f'(x^*) \cdot (x-x^*).</me> By construction, we know that <m>x=x^*</m> is a fixed point of the linearized projection function and the stability of the fixed point as an equilibrium is determined by the slope <m>f'(x^*)</m>. The following theorem guarantees that so long as <m>|f'(x^*)| \ne 1</m>, the stability of the fixed point for the projection function is the same as the linearized function.</p>
    
    <theorem xml:id='thm-projection-fixed-point-stability'>
        <title>Stability of Fixed Points for Projection Functions</title>
        <statement>
            <p>Suppose a projection function <m>f</m> has a fixed point at <m>x=x^*</m> and <m>f'(x^*)</m> exists. So long as <m>|f'(x^*)| \ne 1</m>, the local stability of the fixed point is determined by the value of <m>f'(x^*)</m> as follows. <ul>
                <li>If <m>|f'(x^*)| \lt 1</m>, then <m>x^*</m> is a stable fixed point.</li>
                <li>If <m>|f'(x^*)| \gt 1</m>, then <m>x^*</m> is an unstable fixed point.</li>
            </ul></p>
        </statement>
    </theorem>
</subsection>

<subsection>
    <title>Computer Assisted Analysis</title>
    
    <p>Sage is a computer algebra system, meaning that it can work with formulas symbolically. When we use an algebra system, we have confidence that the algebra and calculus operations are performed properly. Here we will see how we can use Sage to assist in computing the value of the derivative quickly in order to analyze stability of fixed points.</p>
    
    <p>The first thing we need to do is tell Sage what our independent variable will be. If we want to use <m>x</m> as our independent variable, then we start with a command <c>var('x')</c>. Technically, this is only needed for variables other than <m>x</m>. But it is good practice for those times we choose another variable. Sometimes we will have other parameters in our model. We include those as variables as well.</p>
    
    <p>The second step is to define our projection function. Recall that you must show every multiplication symbol. Once this is complete, we can solve the fixed point equation. In Sage, an assignment (setting a variable or function to an expression) is performed with a single equal sign <c>=</c>. A comparison of equality is performed with two equal signs <c>==</c>. There is a possibility of multiple fixed points, so an algebra system reports the solutions to the equation as a list. An example follows.</p>
    
    <example>
        <p>Find the fixed points of the projection function <m>f(x)=x+0.2x(1-0.005x)</m>.</p>
        <sage>
            <input>
            <![CDATA[# Declare the variables
            var('x')
            # Define the function
            f(x)=x+0.2*x*(1-0.005*x)
            
            # Solving an equation starts with the equality x==f(x)
            # then you give the variable you are solving x
            fixPoints = solve( x==f(x), x )
            # The assigned output fixPoints is a list of solutions.
            show(fixPoints)
            ]]>
            </input>
        </sage>
        <p>This shows that the fixed points are <m>x=0</m> and <m>x=200</m>. Sage internally stored those values as two equations in the list named <c>fixPoints</c>. Sage refers to entries in a list like a sequence, with the first value having index 0. That is, <c>fixPoints[0]</c> corresponds to the equation <c>x==0</c>.</p>
        <p>The next step is to compute the derivative at each fixed point. In Sage, we will compute the derivative using the <c>derivative</c> command, which expects a formula and the variable of differentiation. We will define a new function <m>f'(x)</m>, but the apostrophe in Sage represents a quotation and not a derivative. So let us use <c>df(x)</c> in place of <m>f'(x)</m>. We can evaluate the derivative at our fixed point if we use a substitution based on our equations in <c>fixPoints</c>. The following commands must be done after the previous script has already been evaluated.</p>
        <sage>
            <input>
            <![CDATA[# Assume f(x) and fixPoints already complete
            df(x) = derivative(f(x), x)
            show(df(x))  # Display so we can admire its beauty!
            
            # Repeat the block of steps for each fixed point
            for fp in fixPoints:
                show("Evaluation of slope for %s gives" % fp)
                slope = df(x).substitute(fp)
                # Let Sage simplify the formula as much as possible.
                show(slope.simplify())
            ]]>
            </input>
        </sage>
        <p>We can interpret our results for the projection function <me>f(x)=x+0.2x(1-0.005x).</me> At the fixed point <m>x = 0</m>, <m>f(x)</m> has slope <m>f'(0)=1.2</m>. Since <m>|f'(0)|=1.2 \gt 1</m>, we know that the fixed point is unstable and the sequence diverges away from the equilibrium. On the other hand, <m>f(x)</m> at the second fixed <m>x=200</m> has slope <m>f'(200)=0.8</m> so that <m>|f'(200)| \lt 1</m>. This fixed point is stable and a sequence nearby would converge to that value. You can explore the dynamics of this sequence in the graph below, choosing different initial values.</p>
        <figure>
            <caption>Dynamic graph illustrating the sequence generated by <m>f(x)=x+0.2x(1-0.005x)</m> where a slider selects the initial value.</caption>
            <jsxgraph xml:id="jsxgraph-projection-function-example">
                <!-- http://jsxgraph.uni-bayreuth.de/wiki/index.php/Archimedean_spiral -->
                <input>
                <![CDATA[// Put things in an object to protect.
                var jsx2 = {};
                jsx2.board = JXG.JSXGraph.initBoard('jsxgraph-projection-function-example', {boundingbox: [-2, 300, 30, -50], axis:true});
                jsx2.x0 = jsx2.board.create('slider', [[0,-40],[0,280],[-40,10,280]],{name:'x0'});

                jsx2.pt = [];
                jsx2.pt[0] = jsx2.board.create('point', [0, function() { return jsx2.x0.Value(); }], {withLabel:false});
                jsx2.projFcn = function(x) { return x+0.2*x*(1-0.005*x); };
                for (var i=1; i<30; i++) {
                    jsx2.pt[i] = jsx2.board.create('point', [i, function() {
                        return jsx2.projFcn(jsx2.pt[this.name-1].Y());
                    }], {name:i, withLabel:false});
                }
                jsx2.board.create('line', [[0,0], [1,0]], {dash:2,color:'red',fixed:true});
                jsx2.board.create('line', [[0,200], [1,200]], {dash:2,color:'blue',fixed:true});
                ]]>
                </input>
            </jsxgraph>
        </figure>
    </example>

</subsection>
</section>