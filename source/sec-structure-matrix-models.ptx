<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      Mathematical Models in Biology         -->
<!--                                              -->
<!-- Copyright (C) 2017  D. Brian Walton          -->
<!-- See the file COPYING for copying conditions. -->
   
<section xml:id="sec-structure-matrix-models">
  <title>Matrix Models for Structured Populations</title>

  <p>
      Our two-stage model had a very specific structure that we need to explore.
      The projection formulas were written as a sum of terms proportional to our state variables.
      Such a formula is called a <term>linear combination</term>.
  </p>
  <definition xml:id="def-linear-combination">
    <statement>
      <p>
        Given any mathematical objects that can be multiplied by constants and added together, say <m>x_1, x_2, \ldots, x_k</m>, and a corresponding number of constants, <m>c_1, c_2, \ldots, c_k</m>, the sum
        <me>c_1 x_1 + c_2 x_2 + \cdots + c_k x_k</me>
        is called a <term>linear combination</term> of <m>x_1, x_2, \ldots, x_k</m>.
      </p>
    </statement>
  </definition>
  <p>
      When we have state variables <m>x_1, x_2, \ldots, x_k</m>, a recursive model requires that we define <m>k</m> projection formulas, one for each variable.
      If every projection formula is a linear combination of the state variables, then the entire system is specified by knowing the constants.
      <md>
        <mrow> x_{1,n+1} \amp = c_{11} x_{1,n} + c_{12} x_{2,n} + \cdots + c_{1k} x_{k,n} </mrow>
        <mrow> x_{2,n+1} \amp = c_{21} x_{1,n} + c_{22} x_{2,n} + \cdots + c_{2k} x_{k,n} </mrow>
        <mrow> \amp \vdots </mrow>
        <mrow> x_{k,n+1} \amp = c_{k1} x_{1,n} + c_{k2} x_{2,n} + \cdots + c_{kk} x_{k,n} </mrow>
      </md>
      The constants have two subscripts, where the first subscript refers to which row or equation the constant appears in and the second subscript refers to which variable is being multiplied.
      So <m>c_{35}</m> would appear in the 3rd equation/row and be multiplied by the 5th variable.
      Knowing these coefficients is equivalent to knowing the full system of equations.
  </p>
  <note>
    <p>
      If a particular state variable does not appear in the linear combination, its corresponding coefficient should be 0.
    </p>
  </note>
  <p>
      A <term>matrix</term> is a rectangular array of numbers.
      We can represent the system of projection equations with a matrix called a <term>projection matrix</term>,
      <me>
        M = \begin{bmatrix}
        c_{11} &amp; c_{12} &amp; c_{13} &amp; \cdots &amp; c_{1k} \\
        c_{21} &amp; c_{22} &amp; c_{23} &amp; \cdots &amp; c_{2k} \\
        c_{31} &amp; c_{32} &amp; c_{33} &amp; \cdots &amp; c_{3k} \\
        \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
        c_{k1} &amp; c_{k2} &amp; c_{k3} &amp; \cdots &amp; c_{kk}
        \end{bmatrix}
      </me>.
      If we represent the state values in vector form
      <me> \vec{x}_{n} = (x_{1,n}, x_{2,n}, x_{3,n}, \ldots, x_{k,n})</me>,
      then the system of projection formulas can be summarized more concisely with a matrix-vector equation,
      <me>\vec{x}_{n+1} = M \vec x_{n}</me>.
      The mathematical study of these objects and the formal meaning of matrix-vector equations are taught in a subject called <term>linear algebra</term>.
  </p>
  <example>
    <statement>
      <p>
        Consider a population of annual plants with a seedbank such that a seed in the seedbank has a probability 0.6 of germinating each year and a probability 0.2 of surviving in the seedbank to the next season, and where half of plants survive the growing season and subsequently produce an average of 10 seeds.
        Following the model development in <xref ref="sec-structure-two-stage"/>, our projection model can be written
        <md>
          <mrow>S_{n+1} \amp = 0.08 S_{n} + 2 P_{n} </mrow>
          <mrow>P_{n+1} \amp = 0.12 S_{n} + 3 P_{n} </mrow>
        </md>.
        Our projection matrix becomes
        <me>M = \begin{bmatrix} 0.08 \amp 2 \\ 0.12 \amp 3 \end{bmatrix}</me>.
        If we define our state vector as <m>\vec X = (S, P)</m>, then the model can be written
        <me>\vec{X}_{n+1} = M \cdot \vec X_{n}</me>.
      </p>
      <p>
        In R, we can create a matrix using the <c>matrix</c> command.
        This command expects data which will fill columns by default, and a specification of the number of rows and columns.
        The matrix above would be computed in R as <c>matrix(c(0.08, 0.12, 2, 3), nrow=2, ncol=2)</c>.
        Matrix-vector multiplication is performed using <c>%*%</c>.
        The following script illustrates how we would calculate sequence values with initial values <m>\vec{X}_0 = (S_0, P_0) = (20, 0)</m>.
      </p>
      <listing>
        <program language="r">
          <code>
          <![CDATA[# Define the projection matrix.
          M <- matrix(c(0.08, 0.12, 2, 3), nrow=2, ncol=2)

          # Initial values
          S0 <- 20
          P0 <- 0

          # Create space for the state vectors to be stored (as a matrix with 2 columns)
          N <- 30
          X <- matrix(0, nrow=N+1, ncol=2)
          
          # Put initial value in 1st row
          # To refer to a row, leave column blank
          X[1, ] <- c(S0, P0)
          for (n in 1:N) {
            # Fill n+1 row of state values with project from n row of state values
            X[n+1, ] <- M %*% X[n, ]
          }

          library(tidyr)
          library(dplyr)

          # Generate a data-frame, calculate totals and stage distribution
          # S is in column 1 of X, P is in column 2
          seedbank_data <- tibble(t = 0:N, S = X[ ,1], P = X[ ,2]) |>
              mutate(total = S + P) |>
              mutate(rho_S = S/total, rho_P = P/total)

          # Calculate growth ratio
          seedbank_data$lambda_S <- NA
          seedbank_data$lambda_P <- NA
          seedbank_data$lambda_S[2:(N+1)] <- seedbank_data$S[2:(N+1)] / seedbank_data$S[1:N]
          seedbank_data$lambda_P[2:(N+1)] <- seedbank_data$P[2:(N+1)] / seedbank_data$P[1:N]
          ]]>
          </code>
        </program>
      </listing>
      <p>
        After running this code, we discover that this population has an asymptotic growth ratio <m>\lambda = 3.08</m> and a stable stage distribution with <m>\rho_S = 0.4</m> and <m>\rho_P = 0.6</m>.
      </p>
    </statement>
  </example>
  <p>
      Every matrix <m>M</m> that has the same number of rows as columns is called a <term>square matrix</term>.
      From linear algebra, we learn that every square matrix has a collection of <term>characteristic values</term> or <term>eigenvalues</term>, up the number of rows/columns.
      Associated with each eigenvalue <m>\lambda</m> is one or more vector, called an <term>eigenvector</term> <m>\vec{x}</m>.
      The key feature of an eigenvector/eigenvalue pair <m>\{\vec x, \lambda\}</m> is that the matrix-vector multiplication <m>M \cdot \vec x</m> just rescales <m>\vec x</m> by the eigenvalue,
      <me>M \cdot \vec x = \lambda \cdot \vec x</me>.
      Repeated multiplication by <m>M</m> therefore results in exponential growth or decay in the direction of that vector, <m>M^{n} \cdot \vec x = \lambda^n \cdot \vec x</m>.
      The asymptotic growth ratio corresponds to the largest eigenvalue of <m>M</m>.
      Furthermore, the stable stage distribution will be an associated eigenvector to that eigenvalue.
  </p>
  <theorem xml:id="thm-dominant-eigenvalue-asymptotic-rate">
    <statement>
      <p>
        Let <m>M</m> be a square matrix. The <term>dominant eigenvalue</term> of <m>M</m> is the eigenvalue <m>\lambda</m> whose absolute value is the largest of all eigenvalues. Under typical conditions for population projection matrices (irreducible, aperiodic, and non-negative; see the <url href="https://en.wikipedia.org/wiki/Perron%E2%80%93Frobenius_theorem">Perron-Frobenius theorem</url>), using any non-zero and non-negative initial vector <m>\vec{x}_0</m> to compute <m>\vec{x}_n = M^n \vec{x}_0</m> (repeated multiplication by <m>M</m>), then for any state variable <m>x_i</m> (<m>i</m>th value of <m>\vec{x})</m>, we have an asymptotic growth rate matching <m>\lambda</m>:
        <me>\lim_{n \to \infty} \frac{x_{i,n+1}}{x_{i,n}} = \lambda</me>.
        Furthermore, if we find the sum of the state vectors,
        <me>T_n = x_{1,n} + x_{2,n} + x_{3,n} + \cdots + x_{k,n}</me>,
        and the calculate the stage distribution
        <me>\vec{\rho}_n = \vec{x}_n / T_n</me>,
        then <m>\lim_{n \to \infty} \vec{\rho}_n = \vec{v}</m>, an eigenvector whose terms add to 1 and <m>M \cdot \vec{v} = \lambda \cdot \vec{v}</m>.
      </p>
    </statement>
  </theorem>
  <p>
      A linear algebra course would teach us strategies to find eigenvalues and eigenvectors.
      We will let R calculate the values for us directly using the <c>eigen</c> command.
      Given a matrix <c>M</c>, the call <c>eigen(M)</c> will result in a list with two entries.
      The entry named <c>values</c> will contain numerical approximations of the eigenvalues (which might be complex numbers) and the entry named <c>vectors</c> will contain the eigenvectors in an order that matches the eigenvalues, stored as a matrix.
      The columns of that matrix will be the actual eigenvectors.
  </p>
  <p>
    The following listing gives the code that will determine the eigenvalues and eigenvectors of the matrix we introduced in this section.
  </p>
  <listing>
    <program language="r">
      <code>
      <![CDATA[# Define the matrix
      M <- matrix(c(0.08, 0.12, 2, 3), nrow=2, ncol=2)
      my_eig <- eigen(M)
      print(my_eig$values)
      print(my_eig$vectors)
      ]]>
      </code>
    </program>
  </listing>
  <console language="r">
    <output>
    <![CDATA[
    > print(my_eig$values)
    [1] 3.08 0.00
    > print(my_eig$vectors)
                [,1]        [,2]
    [1,] -0.5547002 -0.99920096
    [2,] -0.8320503  0.03996804
    ]]>
    </output>
  </console>
  <p>
    We learn from this code that our matrix <m>M</m> has two eigenvalues, <m>\lambda_1 = 3.08</m> and <m>\lambda_2 = 0</m>.
    The largest eigenvalue corresponds to <m>\lambda_1 = 3.08</m> which will be our <term>dominant eigenvalue</term> and precisely what we discovered earlier using the recursive sequence calculations.
    Because the dominant eigenvalue was the first value in the eigenvalue list, the corresponding 1st column of the eigenvector matrix will be <em>one</em> of the corresponding eigenvectors, <m>\vec{v} = (-0.5547002, -0.8320503)</m>.
    To find the stable stage distribution, we need to rescale this by finding the sum of entries and dividing that vector by the result.
  </p>
  <listing>
    <program language="r">
      <code>
      <![CDATA[# Extract the first column
      v <- my_eig$vectors[ ,1]
      # The total of the values is sum(v)
      # Rescale the vector
      stage_dist <- v / sum(v)
      print(stage_dist)
      ]]>
      </code>
    </program>
  </listing>
  <console language="r">
    <output>
    <![CDATA[
    > print(stage_dist)
    [1] 0.4 0.6
    ]]>
    </output>
  </console>
  <note>
    <p>
      You should not assume the first eigenvalue is automatically the dominant eigenvalue.
      Always check the sizes of all the eigenvalues before selecting the vector that will generate the stable stage distribution.
    </p>
  </note>
  <p>
    Because the state variables eventually start to act like they just multiply by the asymptotic growth rate <m>\lambda</m>, we can immediately deduce from the dominant eigenvalue of a projection matrix whether the population will grow (<m>|\lambda| \gt 1</m>) or decay (<m>|\lambda| \lt 1</m>).
  </p>
</section>