<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      Mathematical Models in Biology         -->
<!--                                              -->
<!-- Copyright (C) 2017  D. Brian Walton          -->
<!-- See the file COPYING for copying conditions. -->
   
<section xml:id="seq-diffeq-interacting-populations">
    <title>Interacting Variables and Producer-Consumer Interactions</title>

    <introduction>
        <p>
            A single differential equation allows us to model a single state variable.
            Just as we could create a system of projection equations when dealing with a population involving multiple state variables, we can similarly create systems of differential equations for multiple state variables.
            In this section, we will focus on systems of differential equations involving two state variables, with a motivating example being the interactions between a producer species and consumer species.
        </p>
        <p>
            Suppose that <m>X</m> and <m>Y</m> represent two state variables that interact, affecting each other's rate of change.
            That is, the rate of change for <m>X</m> will be some function of both <m>X</m> and <m>Y</m> (and possibly time).
            The same will be true for <m>Y</m> but with a different function.
            That is, there are two functions <m>f_1(t, X, Y)</m> and <m>f_2(t, X,Y)</m> so that
            <md>
                <mrow> X' \amp = f_1(t, X, Y),</mrow>
                <mrow> Y' \amp = f_2(t, X, Y).</mrow>
            </md>
            The system is <term>autonomous</term> or <term>time independent</term> if the rate functions do not depend on time, in which case we write
            <md>
                <mrow> X' \amp = f_1(X, Y),</mrow>
                <mrow> Y' \amp = f_2(X, Y).</mrow>
            </md>
            For example, we will consider a producer species that uses photosynthesis to grow and produce its energy and biomass along with a consumer species that consumes individuals from the consumer species for its energy source. The rates of change of these two species will depend on the prevalence of the other species.
        </p>
        <p>
            In this section, we will discuss some strategies for understanding how to generalize the ideas of the phase line, slope fields, and equilibria autonomous systems of differential equations involving two state variables.
            A phase line is used to understand solution behavior for a single variable.
            A <term>phase plane</term> will be the generalization to explore the dynamics for two variables.
            A slope field is a graphical representation showing the rate of change for a single variable with respect to time.
            A <term>vector field</term> allows us to generalize this to visualize relative rates of change for two variables simultaneously.
            Finally, equilibria will exist when both rate functions are equal to zero simultaneously.
            We will look for these equilibria by describing where individual rate functions equal zero<mdash/>called nullclines<mdash/>and find their points of intersection.
        </p>
    </introduction>
    
    <subsection xml:id='subsec-diffeq-phase-plane-vector-fields'>
        <title>The Phase Plane and Vector Fields</title>

        <p>
            When we find solutions to the system of differential equations,
            our two state variables each will be functions of time.
            Each of them will have their own graph involving points <m>(t, X(t))</m> or <m>(t,Y(t))</m>.
            The idea of the phase plane is to consider the state variables as forming points in the plane, <m>(X,Y)</m>.
            At each instant of time <m>t</m>, the value of <m>X(t)</m> will determine the <m>x</m>-coordinate of the point while the value <m>Y(t)</m> will determine the <m>y</m>-coordinate.
            As time passes, the values of <m>X</m> and <m>Y</m> change, and the corresponding state as a point will move around in the phase plane.
        </p>
        <p>
            Consider the functions <m>X(t) = \cos(t)</m> and <m>Y(t) = \sin(t)</m>.
            We learned in trigonometry or calculus that the point <m>(\cos(t), \sin(t))</m> represents a point on the unit circle corresponding to a radian angle of <m>t</m>.
            Consequently, the point <m>(X(t),Y(t))</m> can be visualized as moving around the unit circle in the phase plane.
            The individual functions trace out the cosine or sine graphs in the <m>(t, X(t))</m> and <m>(t,Y(t))</m> graphs.
            But in the phase plane, <m>(X(t), Y(t))</m> traces out the circle.
        </p>
        <figure>
            <caption>Trace of <m>(\cos(t),\sin(t))</m> in phase plane</caption>
            <interactive xml:id="circle-phase-plane" platform="jsxgraph" aspect="2:1" source="code/jsx/jsx-circle-phase-plane.js">
                <sidebyside width="45%" margins="5%">
                    <stack>
                        <slate xml:id="jsx-circle-pp-graph_X" surface="jsxboard" aspect="2:1" />
                        <slate xml:id="jsx-circle-pp-graph_Y" surface="jsxboard" aspect="2:1" />
                    </stack>
                    <slate xml:id="jsx-circle-phase-plane" surface="jsxboard" aspect="1:1" />
                </sidebyside>
                <instructions xml:id="circle-phase-plane-instructions">
                <p>
                    Use the time slider in the top left panel to vary the time to observe how the point in the phase plane moves.
                </p>
                </instructions>
            </interactive>
        </figure>
        <p>
            Once we recognize that two functions of time can characterize a point in the phase plane that moves, we turn our attention to the derivatives of those functions.
            Each function <m>X(t)</m> and <m>Y(t)</m> has a derivative <m>X'(t)</m> and <m>Y'(t)</m> which represent the slope of the individual graphs in the <m>(t,X)</m> and <m>(t,Y)</m> planes.
            (Remember, these are not phase planes.)
            We are going to draw a <term>vector</term> in the phase plane anchored at <m>(X(t), Y(t))</m> and ending at a point <m>(X(t) + \epsilon \cdot X'(t), Y(t) + \epsilon \cdot Y'(t))</m>, for some positive scaling value <m>\epsilon</m>.
            That second point represents a point we would reach if we followed the tangent lines for <m>X(t)</m> and <m>Y(t)</m> for some amount of time <m>\epsilon</m>.
            This resulting vector is called a <term>tangent vector</term>.
            We say that <m>(X'(t), Y'(t))</m> is the <term>velocity vector</term>, corresponding to choosing <m>\epsilon = 1</m>, and it gives the direction and speed of the tangent vector.
            These vectors will always be perfectly tangent to the curve the point follows in the phase space.
        </p>
        <figure>
            <caption>Trace of <m>(\cos(t),\sin(t))</m> in phase plane showing the velocity vector.</caption>
            <interactive xml:id="circle-phase-plane-tangent" platform="jsxgraph" aspect="2:1" source="code/jsx/jsx-circle-phase-plane-tangent.js">
                <sidebyside width="45%" margins="5%">
                    <stack>
                        <slate xml:id="jsx-circle-ppt-graph_X" surface="jsxboard" aspect="2:1" />
                        <slate xml:id="jsx-circle-ppt-graph_Y" surface="jsxboard" aspect="2:1" />
                    </stack>
                    <slate xml:id="jsx-circle-phase-plane-tangent" surface="jsxboard" aspect="1:1" />
                </sidebyside>
                <instructions xml:id="circle-phase-plane-tangent-instructions">
                <p>
                    Use the time slider in the top left panel to vary the time to observe how the tangent vector is related to the curve the point follows in phase space.
                </p>
                </instructions>
            </interactive>
        </figure>
        <p>
            Where a single autonomous differential equation <m>X' = f(X)</m> defines a slope field that depends only on <m>X</m> (and not <m>t</m>), an autonomous system of two differential equations
            <md>
                <mrow>X' \amp = f_1(X,Y), </mrow>
                <mrow>Y' \amp = f_2(X,Y), </mrow>
            </md>
            defines a <term>vector field</term>.
            At each point in the <m>(X,Y)</m> phase plane, the functions <m>(f_1,f_2)</m> define velocity vectors based on the location of that point.
            We then would be looking a solution that consists of two functions <m>X(t)</m> and <m>Y(t)</m> such that the resulting flow of the point <m>(X(t),Y(t))</m> through the phase plane always has its velocity vector exactly match the vector field's velocity.
        </p>
        <p>
            For practical visualization reasons, a vector field is typically rescaled so that the vectors don't overlap.
            Longer vectors correspond to faster changes in the functions.
            Shorter vectors correspond to slowly changing functions.
        </p>
        <p>
            An initial condition represents a starting point in the phase plane at some specified time.
            If we said <m>(X(t_0), Y(t_0)) = (a,b)</m>, then the point <m>(a,b)</m> is the initial point at the time <m>t = t_0</m>.
            This would require that our solution functions <m>X(t)</m> and <m>Y(t)</m> have graphs that individually pass through <m>(t_0, a)</m> and <m>(t_0,b)</m>, respectively.
        </p>
        <figure>
            <caption>The vector field <m>f_1(x,y) = -y</m> and <m>f_2(x,y)=x</m> has solutions that are rescaled and shifted sine/cosine pairs to pass through an initial point at <m>t=0</m>.</caption>
            <interactive xml:id="circle-phase-plane-field" platform="jsxgraph" aspect="2:1" source="code/jsx/jsx-circle-phase-plane-field.js">
                <sidebyside width="45%" margins="5%">
                    <stack>
                        <slate xml:id="jsx-circle-ppf-graph_X" surface="jsxboard" aspect="2:1" />
                        <slate xml:id="jsx-circle-ppf-graph_Y" surface="jsxboard" aspect="2:1" />
                    </stack>
                    <slate xml:id="jsx-circle-phase-plane-field" surface="jsxboard" aspect="1:1" />
                </sidebyside>
                <instructions xml:id="circle-phase-plane-field-instructions">
                <p>
                    Drag the initial point in the phase plane to select different solutions. Drag the point <m>t</m> in the <m>X</m> graph plane to follow the individual solution and visualize the corresponding tangent vectors.
                </p>
                </instructions>
            </interactive>
        </figure>
    </subsection>
    <subsection xml:id="subsec-diffeq-systems-differential-equations">
        <title>Systems of Differential Equations</title>
        
        <p>
            We now return to the idea of an autonomous (time-independent) system of differential equations,
            <md>
                <mrow>X' \amp = f_1(X, Y),</mrow>
                <mrow>Y' \amp = f_2(X, Y).</mrow>
            </md>
            The pair of functions <m>f_1</m> and <m>f_2</m> define a vector field.
            At each point in the phase plane <m>(X,Y)</m>, the first function <m>f_1</m> gives the rate of change in the direction of the first variable and <m>f_2</m> gives the rate of change in the direction of the second.
            Just as we could draw a slope field for a single differential equation in the <m>(t,X)</m> plane, a vector field allows us to visualize the flow of the differential equation in the <m>(X,Y)</m> phase plane.
            Time does not directly appear in the vector field, but the lengths of the vectors are proportional to the speed of change, so shorter vectors correspond to regions of slower change.
        </p>
        <p>
            To illustrate the idea of a system of differential equations, we will consider a model of two populations, a producer and a consumer.
            As a specific example, consider algae as a producer and zooplankton as a consumer.
            The algae generates biomass through photosynthesis.
            The zooplankton consume the algae in order to produce its biomass.
        </p>
        <p>
            In the absence of any zooplankton, the algae would behave like a simple population that grows subject to the natural constraints of the environment.
            When zooplankton are introduced, we would expect that this introduces a new loss term for the algae similar to our approach for harvesting a population, except that the total rate of harvesting is going to be proportional to the population of the zooplankton.
            The proportionality term represents the rate of algae consumption per individual zooplankton (or per unit measure of zooplankton population) and this will be some function of the algae density.
        </p>
        <p>
            The zooplankton, on the other hand, require the presence of algae to survive.
            The intrinsic per capita growth rate for zooplankton without algae is therefore necessarily a negative value, corresponding to a population in decline.
            This per capita growth rate will be a function of the algae population density that is increasing such that increased algae density corresponds to a higher per capita growth rate.
            It will typically have the same functional form as the proportionality coefficient for harvesting, since the improved growth of zooplankton is typically directly related to the ability of zooplankton to consume algae.
        </p>
        <p>
            To describe our model, we first introduce our state variables.
            Let <m>A</m> represent the algae population density and let <m>Z</m> represent the zooplankton population density.
            We model the algae population with logistic growth coupled with a zooplankton consumption term proportional to the product <m>A \cdot Z</m>, such that the consumption of an individual zooplankton is itself proportional to the density of algae around it.
            We model the zooplankton population with a per capita growth rate that is negative for <m>A=0</m> but which increases proportionally with <m>A</m>.
            The system of differential equations is given by
            <md>
                <mrow>A' \amp = r_A A \cdot \left(1 - \frac{A}{K}\right) - b A Z,</mrow>
                <mrow>Z' \amp = (-r_Z + c A) \cdot Z.</mrow>
            </md>
        </p>
        <p>
            The model has five different model parameters.
            It can be overwhelming to try to explore the possible outcomes with so many parameters.
            As we have seen in the past, some of the parameters can be used to set natural units of scale for the different variables.
            We have two state variables plus time, giving three possible units of scale.
            We might be able to rewrite our model equations using appropriate units to go from five parameters to only two in a nondimensionalized version.
        </p>
        <p>
            To create our nondimensionalized equations, we think of each state variable (<m>A</m> and <m>Z</m>) as a unit of scale (<m>\hat{A}</m> and <m>\hat{Z}</m>) times a dimensionless numerical variable (<m>a</m> and <m>z</m>), giving us <m>A = hat{A} \cdot a</m> and <m>Z = \hat{Z} \cdot z</m>.
            Similarly, we have our time variable <m>t</m> measured in terms of a time scale <m>T</m> and a dimensionless variable <m>\tau</m>.
            The derivatives <m>A'</m> and <m>Z'</m> will be rewritten as dimensionless derivatives <m>\dot{a} = \frac{da}{d\tau}</m> and <m>\dot{z} = \frac{dz}{d\tau}</m> with units of measure <m>\frac{\hat{A}}{T}</m> and <m>\frac{\hat{Z}}{T}</m>, respectively.
            In terms of these units, our differential equations become
            <md>
                <mrow>\frac{\hat{A}}{T} \dot{a} \amp = r_A \hat{A} a \cdot \left(1 - \frac{\hat{A} a}{K}\right) - b \hat{A} \hat{Z} a z,</mrow>
                <mrow>\frac{\hat{Z}}{T} \dot{z} \amp = (-r_Z + c \hat{A} a) \cdot \hat{Z} z.</mrow>
            </md>
            Rewriting these equations so that only <m>\dot{a}</m> and <m>\dot{z}</m> are on the left sides of the equations, we get
            <md>
                <mrow>\dot{a} \amp = r_A T a \cdot \left(1 - \frac{\hat{A} a}{K}\right) - b T \hat{Z} a z,</mrow>
                <mrow>\dot{z} \amp = (-r_Z T + c T \hat{A} a) \cdot z.</mrow>
            </md>
        </p>
        <p>
            At this point, the strategy is to make choices for our scales so that terms involving parameters simplify to simple numerical values.
            For example, we see that <m>T</m> appears in the product <m>r_A T a</m>, so if we <em>choose</em> <m>T = \frac{1}{r_A}</m>, the term will be rewritten as just <m>a</m>.
            Similarly, the scale <m>\hat{A}</m> appears in the fraction <m>\frac{\hat{A} a}{K}</m>, so the choice <m>\hat{A} = K</m> will result in the term also being rewritten as just <m>a</m>.
            The scale <m>\hat{Z}</m> only appears in the term <m>b T \hat{Z} a z</m>.
            We already have <m>T = \frac{1}{r_A}</m>, so choosing <m>\hat{Z} = \frac{1}{bT} = \frac{r_A}{b}</m> results in that term becoming just <m>az</m>.
        </p>
        <p>
            The nondimensionalized system of differential equations with this choice of scales is therefore written,
            <md>
                <mrow>\dot{a} \amp = a \cdot \left(1 - a\right) - a z,</mrow>
                <mrow>\dot{z} \amp = (- \frac{r_Z}{r_A} + \frac{c K}{r_A} a) \cdot z.</mrow>
            </md>
            This new system depends only on two parameters, <m>\rho = \frac{r_Z}{r_A}</m> and <m>\beta = \frac{cK}{r_A}</m>, so that we rewrite the model as
            <md>
                <mrow>\dot{a} \amp = a \cdot \left(1 - a\right) - a z,</mrow>
                <mrow>\dot{z} \amp = (- \rho + \beta a) \cdot z.</mrow>
            </md>
            By exploring different choices for those parameters, we can understand the different possible outcomes predicted by the original model.
        </p>
        <p>
            We will let a computer help us visualize the dynamics by plotting a vector field along with solution curves, called <term>trajectories</term>, in the phase plane.
            To find the vector field, our use of <c>geom_quiver</c> will be modified in that the displacement for our arrows will depend on both rates of change.
            In the <c>mapping = aes()</c> call, we will need <c>u</c> assigned to the values of the <m>a</m> rate of change and <c>v</c> assigned to the values of the <m>z</m> rate of change.
            To find our solution curves, we will again use the <c>ode</c> function from the <c>deSolve</c> library.
            The primary difference is that we now have two state variables, so the <c>init_state</c> argument will need to provide initial values for each of the variables <m>a</m> and <m>z</m>.
            Our rate function will also be required to return a list of two different rates.
        </p>
        <p>
            One of the major challenges with visualizing vector fields is that the length of the vectors can be exceptionally small for many of the arrows on the grid.
            This makes it difficult to see what is happening.
        </p>
        <listing>
            <program language="r">
                <code>
                <![CDATA[# Load the libraries
                library(ggplot2)
                library(ggquiver)
                library(deSolve)
                library(dplyr)

                # Define our model parameters
                my_params <- c(alpha = 0.2, beta = 0.1)

                # Create a phase plane grid of points for vector field
                grid_pts <- expand.grid(a = seq(0, 1,length=31), 
                                        z = seq(0, 1, length=31))

                # Define the simple rate calculations for vector field
                f1 <- function(a, z, params) {
                    with(as.list(params), a*(1-a)-a*z)
                }
                f2 <- function(a, z, params) {
                    with(as.list(params), (-alpha+beta*a)*z)
                }

                vec_field_data <- grid_pts |>
                    mutate(aRate = f1(a,z, my_params), 
                           zRate = f2(a,z, my_params))
                vec_field_graph <- ggplot() +
                    geom_quiver(data = vec_field_data,
                                mapping = aes(x = a, y = z,
                                              u = aRate,
                                              v = zRate)
                                )
                show(vec_field_graph)
                ]]>
                </code>
            </program>
        </listing>
        <figure xml:id="fig-producer-consumer-original-vector-field">
            <caption>Vector field for the producer-consumer model with <m>\alpha=0.2</m> and <m>\beta=0.1</m> shows many vectors with extremely short lengths.</caption>
            <image source="images/producer-consumer-original-vector-field.png">
                <shortdescription>unscaled vector field for producer-consumer system shows too many short vectors</shortdescription>
            </image>
        </figure>
        <p>
            We can improve our visualization by rescaling all of the rates by the length of the vectors to provide directions of the same length, and then using color to distinguish the actual speed of change.
            Because the speed varies on the grid over several orders of magnitude, we <em>visualize</em> the speed using the logarithm of the speed.
        </p>
        <listing>
            <program language="r">
                <code>
                <![CDATA[# Load the libraries
                library(ggplot2)
                library(ggquiver)
                library(deSolve)
                library(dplyr)

                # Define our model parameters
                my_params <- c(alpha = 0.2, beta = 0.1)

                # Create a phase plane grid of points for vector field
                grid_pts <- expand.grid(a = seq(0, 1.2,length=31), 
                                        z = seq(0, 1.2, length=31))

                # Define the simple rate calculations for vector field
                f1 <- function(a, z, params) {
                    with(as.list(params), a*(1-a)-a*z)
                }
                f2 <- function(a, z, params) {
                    with(as.list(params), (-alpha+beta*a)*z)
                }

                vec_field_data <- grid_pts |>
                    mutate(aRate = f1(a,z, my_params), 
                           zRate = f2(a,z, my_params)) |>
                    mutate(speed = sqrt(aRate^2 + zRate^2)) |>
                    mutate(aDir = aRate / speed,
                           zDir = zRate / speed)

                vec_field_graph <- ggplot() +
                    geom_quiver(data = vec_field_data,
                                mapping = aes(x = a, y = z,
                                              u = aDir,
                                              v = zDir,
                                              color = log(speed))
                                ) +
                    scale_color_continuous(type = "viridis")
                show(vec_field_graph)
                ]]>
                </code>
            </program>
        </listing>
        <figure xml:id="fig-producer-consumer-colored-vector-field-01">
            <caption>Rescaled vector field for the producer-consumer model with color scheme to show speed, <m>\alpha=0.2</m> and <m>\beta=0.1</m>.</caption>
            <image source="images/producer-consumer-colored-vector-field-01.png">
                <shortdescription>rescaled vector field for producer-consumer system using color to show speed</shortdescription>
            </image>
        </figure>
        <p>
            We can now add trajectories to our phase plane.
            Based on the vector field, we might choose some relevant initial conditions.
            For this first setting, we might be interested in what happens if we start with a lot of both organisms, which in the nondimensionalized values might be <m>(a,z) = (1,1)</m>.
            It might also be interesting to visualize what happens if we start on the left side of the plane, say at <m>(a,z) = (0.1, 0.75)</m>.
            Continuing from the previous listing, we add some additional code.
        </p>
        <p>
            We also want to visualize the solutions as functions of time.
            Each set of initial conditions results in a different pair of functions, so we generate graphs of solutions within our loop.
        </p>
        <listing>
            <program language="r">
                <code>
                <![CDATA[# Having already defined parameters and the vector field

                # Define the rate function for ode
                # Use the previously defined functions
                rateFcn <- function(t, state, params) {
                    with(as.list(state), {
                        a_rate <- f1(a,z,params)
                        z_rate <- f2(a,z,params)
                        list(c(a_rate, z_rate))
                    })
                }

                times <- seq(0, 20, by=0.1)
                init_vals <- list(a0 = c(1, 0.1), z0 = c(1, 0.75))

                # Start with the vector field
                trajectory_graph <- vec_field_graph

                # Loop through the different initial states to create graph
                num_conditions <- length(init_vals $ a0)
                for (i in 1:num_conditions) {
                    # Find the diff eqn solutions
                    soln <- ode(c(a = init_vals $ a0[i],
                                  z = init_vals $ z0[i]),
                                times,
                                rateFcn,
                                my_params)
                    # Add trajectories to the graph
                    trajectory_graph <- trajectory_graph +
                        geom_path(data = soln,
                                  mapping = aes(x = a, y = z),
                                  color = "black",
                                  linewidth = 1)
                    # Solution graph
                    solution_graph <- ggplot(data = soln) +
                        geom_line(mapping = aes(x=time, y=a, color="a")) +
                        geom_line(mapping = aes(x=time, y=z, color="z")) +
                        labs(x = "time", y = "population density") +
                        scale_color_discrete(breaks = c("a", "z"),
                                             name = "")
                    show(solution_graph)
                }

                # Show the results
                show(trajectory_graph)
                ]]>
                </code>
            </program>
        </listing>
        <figure xml:id="fig-producer-consumer-pp-trajectories-01">
            <caption>Trajectories added to the producer-consumer system vector field, <m>\alpha=0.2</m> and <m>\beta=0.1</m>.</caption>
            <image source="images/producer-consumer-pp-trajectories-01.png">
                <shortdescription>trajectories included with the vector field for producer-consumer system</shortdescription>
            </image>
        </figure>
        <figure xml:id="fig-producer-consumer-solutions-01">
            <caption>Trajectories added to the producer-consumer system vector field, <m>\alpha=0.2</m> and <m>\beta=0.1</m>.</caption>
            <sidebyside>
            <image source="images/producer-consumer-solutions-01-1.png" />
            <image source="images/producer-consumer-solutions-01-2.png" />
            </sidebyside>
        </figure>
        <p>
            For both of our initial conditions for this first choice of model parameters, we see that <m>a</m> appears to be heading toward a non-zero equilibrium while <m>z</m> appears to be heading toward zero.
        </p>
        <p>
            Repeating the previous calculations with an adjustment in parameter values to use <c>my_params &lt;- c(alpha = 0.2, beta = 0.3)</c>, but otherwise not changing the scripts, we obtain a new vector field with trajectories.
            This time, both of our initial conditions are showing both <m>a</m> and <m>z</m> converging to nonzero equilibrium values.
            For the parameter value <m>\alpha = 0.2</m>, there must be some threshold for <m>\beta</m> such that for larger values of <m>\beta</m>, both zooplankton and algae are able to survive, but below that threshold, the zooplankton die off and the algae goes to its own nonzero equilibrium.
            We will explore this more methodically in a later section.
        </p>
        <figure xml:id="fig-producer-consumer-pp-trajectories-02">
            <caption>Trajectories added to the producer-consumer system vector field, <m>\alpha=0.2</m> and <m>\beta=0.3</m>.</caption>
            <image source="images/producer-consumer-pp-trajectories-02.png">
                <shortdescription>trajectories included with the vector field for producer-consumer system</shortdescription>
            </image>
        </figure>
        <figure xml:id="fig-producer-consumer-solutions-02">
            <caption>Trajectories added to the producer-consumer system vector field, <m>\alpha=0.2</m> and <m>\beta=0.3</m>.</caption>
            <sidebyside>
            <image source="images/producer-consumer-solutions-02-1.png" />
            <image source="images/producer-consumer-solutions-02-2.png" />
            </sidebyside>
        </figure>
        <p>
            An interactive figure is provided below where you can explore the dynamics by adjusting the two free parameters as well as the initial condition.
        </p>
        <figure>
            <caption>Interactive dynamics of the producer-consumer model</caption>
            <interactive xml:id="producer-consumer-dynamics" platform="jsxgraph" aspect="16:9" source="code/jsx/jsx-producer-consumer-dynamics.js">
                <slate xml:id="jsx-pc-controls" surface="jsxboard" aspect="16:1" />
                <sidebyside width="50%">
                    <slate xml:id="jsx-pc-pplane" surface="jsxboard" aspect="1:1" />
                    <slate xml:id="jsx-pc-solutions" surface="jsxboard" aspect="1:1" />
                </sidebyside>
                <instructions xml:id="producer-consumer-instructions">
                <p>
                    Use the sliders to change model parameters, and change the initial point.
                </p>
                </instructions>
            </interactive>
        </figure>
    </subsection>
</section>