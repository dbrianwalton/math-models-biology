<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      Mathematical Models in Biology         -->
<!--                                              -->
<!-- Copyright (C) 2017  D. Brian Walton          -->
<!-- See the file COPYING for copying conditions. -->
   
<section xml:id="sec-population-discrete">
    <title>Discrete Population Models</title>

    <p>
        Many organisms reproduce only during specific seasons.
        For example, annual plants grow from seeds that germinate during the spring, flower in the summer fertilizing new seeds, and disperse the seeds in the autumn for the following year.
        Some insects have a very specific pattern of growth, passing through various stages of development to emerge for mating at a specific time of the year, with the Mayfly as a particular example.
        Salmon eggs are fertilized in river tributaries during a specific spawning season;
        the eggs hatch into salmon fry which, when they are old enough, migrate to the ocean as immature juveniles;
        and after several years of growing in the ocean, they return as fertile adults to the same tributary for another spawning season.
        For such organisms, we can think of the new offspring as annual recruits to the overall population, all of which are added in a single burst.
    </p>
    <p>
        To model a population with clearly delineated reproductive events, we generally desire a model that describes the size of the population at the same point of the reproductive cycle.
        For example, we might want to look at the sequence of the density of a particular flowering plants each year at a particular study area.
        Or we might want to count the number of spawning salmon swimming up a particular tributary each year.
        Even for models that reproduce continuously or multiple times during a season, we might consider that we only observe those population as regular events.
    </p>
    <p>
        A <term>discrete-time model</term> is a model of the state of a system that is measured at regular-spaced, distinct moments of time.
        In this section, we introduce the study of populations using discrete-time models.
        More specifically, we will introduce discrete models involving constant per capita rates.
        In the next section, we continue the study of discrete models where we look at density dependence.
    </p>
    <p>
        The other type of model is a <term>continuous-time model</term> in which each state variable is modeled as a continuous function of time.
        Those models require the introduction of <term>differential equations</term> where the rates of change are characterized by equations involving the derivatives of the functions as one of the state variables.
        We will look at continuous-time models in a later chapter.
    </p>
    <p>
        Mathematically, discrete-time models involve modeling using <term>sequences</term>.
        A <term>sequence</term> is an ordered set of numbers.
        Suppose that a system has a variable <m>x</m> that is measured at regular intervals (e.g., a population).
        We often think of our variable as having an initial value and think of subsequent measurements as counting the number of additional observations.
        An <term>index variable</term> is a variable that represents the count (or index) through the observations.
        The value of the variable <m>x</m> for a given index <m>n</m> is indicated by writing the index value as a subscript on the variable, such as <m>x_n</m>.
        We will commonly think of the first value of a sequence as corresponding to index <m>n=0</m>, so that index values <m>n &gt; 0</m> are interpreted as the number of intervals <em>following</em> that initial observation.
        Formally, a sequence is a function where the domain (index-values) consist only of integers.
    </p>
    
    <example>
        <p>
            Consider a population that is recorded at regular intervals with the following values: 199, 217, 236, 257, 264, 301, 312, 315, 331, â€¦.
            If we let <m>P</m> represent the population size, then the sequence <me>P = (199, 217, 236, 257, 264, 301, 312, 315, 331, \ldots)</me> has an initial value <m>P_0 = 199</m> and subsequent values <m>P_1 = 217</m>, <m>P_2 = 236</m>, <m>P_3=257</m>, and so on.
        </p>
    </example>
    
    <p>
        As motivated by our agent-based models, we might think of our population as changing through births and deaths.
        We might also include immigration and emigration.
        We can think of death and emigration as sources of loss, with individuals who were counted in the previous population and remain in the population for the next observation as survivors.
        Individuals that are new to the population, either from birth or from immigration, can be considered as recruits.
        The total population each year is described by the equation
        <me>\hbox{New Population} = \hbox{Survivors} + \hbox{New Recruits}.</me>
        If we classified losses as deaths and emigrants and recruits as births and immigrants, we might consider the more detailed equation
        <me>\hbox{New Population} = \hbox{Old Population} - \hbox{Deaths} - \hbox{Emigrants} + \hbox{Births} + \hbox{Immigrants}.</me>
        This is visualized as the graphical model shown in <xref ref="fig-abstract-population-model"/>, shown again here.
    </p>

    <image width="50%" source="images/population-visual-model-full"/>

    <p>
        A <term>mathematical model</term> for a population represents an abstraction of this pattern.
        First, we will consider each of the terms as variables in a system.
        Then we will seek mathematical equations that relate these variables in a way that will allow us to predict how the variables change. Because the real system involves stochasticity as well as more variables than we can reasonably include, our equations will only attempt to model enough of the behavior that we deem adequate and necessary to characterize the behavior we seek to describe.
    </p>
    
    <p>
        We begin by defining our system.
        Let <m>P</m> represent the population.
        Let <m>B</m> represent the number of births, or more precisely, the number of individuals in <m>P</m> that were born since the last observation and have survived for the current census.
        Let <m>D</m> represent the number of deaths of individuals that were counted in the previous observation.
        Let <m>E</m> and <m>I</m> represent the number of emigrants (individuals of the previous census who left) and the number of immigrants (counted individuals that arrived since the previous census), respectively.
    </p>
    <p>
        Each of these variables in the system represent sequences.
        That is, we will think of the variable counting time cycles, say <m>n</m>, as the index.
        The population at time cycle <m>n</m> is the sequence value <m>P_n</m>.
        We will often want to talk about two consecutive values in the sequences.
        <m>P_{n+1}</m> represents the population in the cycle <m>n+1</m>, meaning it is the <em>next</em> population value after <m>P_n</m>.
        Similarly, <m>P_{n-1}</m> represents the population in the <em>previous</em> time cycle.
        Note that by our definition, <m>B_{n}</m> represents the number of births <em>after</em> <m>P_{n-1}</m> was observed through the time that <m>P_n</m> is observed.
    </p>
    <p>
        We create a mathematical model by writing an equation about the sequence values.
        The <em>new</em> population value is found by taking the previous population value and adding the births and immigrations during the time cycle and subtracting the deaths and emigrations during that same cycle.
        This is expressed using the equation
        <me>P_{n+1} = P_n + B_{n+1} - D_{n+1} + I_{n+1} - E_{n+1}.</me>
        We often rewrite this equation as a <term>difference equation</term> that only shows the change in the sequence, 
        <me>P_{n+1} - P_n =  B_{n+1} - D_{n+1} + I_{n+1} - E_{n+1}.</me>
    </p>
    <p>
        The model is not yet complete.
        We need model equations for each of the terms describing births, deaths, and migration.
        Our next step is to create equations relating the various terms.
        In particular, different models correspond to applying different equations that will allow us to find the birth, death and migration rates in terms of the previous population value.
    </p>
    <p>
        The naive model for reproduction was that the number of births and deaths are proportional to the population.
        That is, in terms of our sequence, there are constants <m>b</m> and <m>d</m> such that
        <md>
            <mrow>B_{n+1} = b \cdot P_{n},</mrow>
            <mrow>D_{n+1} = d \cdot P_{n}.</mrow>
        </md>
        We call the constants <m>b</m> and <m>d</m> the <term>per capita birth rate</term> and the <term>per capita death rate</term>, respectively.
        The phrase <em>per capita</em> literally means per head, and the per capita rates represent the average per individual contribution to birth and death.
        Rewriting the equations, we could instead <em>define</em> <m>b</m> and <m>d</m> as the following ratios, 
        <md>
            <mrow>b = \frac{B_{n+1}}{P_{n}},</mrow>
            <mrow>d = \frac{D_{n+1}}{P_{n}},</mrow>
        </md>
        which we are modeling as being constant.
        More advanced models consider these ratios as changing.
        We require that <m>b \ge 0</m> and <m>0 \le d \le 1</m>.
    </p>
    <p>
        A visual model for our constant per capita birth and death rates is shown in <xref ref="fig-population-visual-model-birth-death-rates"/>.
        The formulas for the individual rates are shown on the rate arrows.
        In addition, to emphasize the dependence of the birth rate on the population size, a dashed line is drawn from the population's box circling back to the birth rate.
        Rates leaving a population (like the death rate) are always assumed to have this dependence.
    </p>
    <figure xml:id="fig-population-visual-model-birth-death-rates">
        <caption>A visual model for per capita birth and death rates.</caption>
        <image width="50%" source="images/population-visual-model-birth-death-rates"/>
    </figure>
    <p>
        In the absence of migration, the constant per capita rate model leads to a dynamic model 
        <me>P_{n+1} = P_n + b \cdot P_n - d \cdot P_n.</me>
        We can rewrite this as 
        <me>P_{n+1} = (1+b-d) P_n = (1+r) P_n,</me>
        where <m>r=b-d</m> is called the per capita net growth rate.
        The value of <m>r</m> physically must satisfy <m>r \ge -1</m>, as <m>r=-1</m> corresponds to no new births (<m>b=0</m>) and every individual dying (<m>d=1</m>).
        This simplified model is often visualized as the graphical model shown in <xref ref="fig-population-visual-model-net-growth-rate"/>.
        The birth and death contributions are combined into the loop, which represents both losses (individuals leaving the population) and gains (individuals entering the population).
        This equation, called the <term>recursive equation</term>, is identical to the equation for compounded interest where <m>r</m> represents that percent growth rate.
    </p>
    <figure xml:id="fig-population-visual-model-net-growth-rate">
        <caption>A visual model showing a constant per capita net growth rate.</caption>
        <image width="50%" source="images/population-visual-model-net-growth-rate"/>
    </figure>
    <p>
        Just as compound interest results in exponential growth, the constant per capita model results in a population that grows or decays exponentially.
        Most of our models will not have nice explicit formulas, but this model will.
        So we start by looking at the exact mathematics describing our dynamics.
    </p>
    <p>
        The starting population is represented by <m>P_0</m>.
        Our model gives us a relation between <m>P_0</m> and <m>P_1</m>:
        <me>P_1 = (1+r) P_0</me>.
        But the same model gives us a relation between <m>P_1</m> and <m>P_2</m>:
        <me>P_2 = (1+r) P_1</me>.
        If we substitute our value for <m>P_1</m> into the second equation, we find
        <me>P_2 = (1+r) \cdot (1+r) P_0 = (1+r)^2 P_0</me>.
        Repeating this cycle after cyle, we find the classic formula of a <term>geometric sequence</term> for the population size after <m>n</m> cycles,
        <me>P_n = P_0 \cdot (1+r)^{n}.</me>
        This representation of the sequence is called the <term>explicit formula</term> and it allows us to compute the population value <m>P_n</m> knowing only index <m>n</m> and the initial value.
        This geometric sequence corresponds to exponential growth when <m>r \gt 0</m> and to exponential decay when <m>r \lt 0</m>.
        In the singular case where <m>r=0</m>, the population remains constant.
    </p>
    <example>
        <statement>
            <p>
                A population with initial size 400 is tracked for one month, during which time there are 50 births and 40 deaths.
                If the population has constant monthly per capita rates, what will be the predicted population after one year?
            </p>
        </statement>
        <solution>
            <p>
                Constant per capita rates mean that we can compute <m>b</m> and <m>d</m> from this observation and use them in our model:
                <md>
                    <mrow> b = \frac{50}{400} = \frac{1}{8} = 0.125, </mrow>
                    <mrow> d = \frac{40}{400} = \frac{1}{10} = 0.1.</mrow>
                </md>
                Consequently, our population model is given by the recursive formula
                <me>P_{n+1} = (1+0.125-0.1) P_n = 1.025 P_n,</me>
                with an initial value <m>P_0 = 400</m>.
                The index variable <m>n</m> is counting months of observation.
            </p>
            <p>
                The explicit formula for this model is given by
                <me>P_n = 400 \cdot 1.025^{n}.</me>
                The population after a year corresponds to <m>P_{12}</m> (12 months after starting), which has a value
                <me>P_{12} = 400 \cdot 1.025^{12} \approx 538.</me>
                Under the assumptions of our model, namely constant per capita growth rates, we would predict a population of 538 individuals after one year.
            </p>
        </solution>
    </example>
    <p>
        How can we create this model in R?
        Because the model has an explicit formula for the population as a function of time,
        we first illustrate an explicit approach.
        For that approach, we generate a sequence to represent time and then calculate the corresponding population values.
        The time sequence is an array of values called a <term>vector</term>.
        In R (and other languages like Python and Matlab), it is possible to perform the same calculation on every entry in a vector with a single command.
        This is called a <term>vectorized calculation</term>.
        Basic arithmetic and mathematical functions are vectorized.
    </p>
    <sage language="r">
        <input>
        library(tidyr)
        library(ggplot2)

        # Set model parameters
        b &lt;- 50/400
        d &lt;- 40/400
        r &lt;- b - d
        P0 &lt;- 400

        # Create a sequence of times
        t_vals &lt;- seq(from = 0, to = 50)

        # Calculate the population using explicit model
        P_vals &lt;- P0 * (1 + r)^t_vals

        # Plot the population
        data &lt;- tibble(t = t_vals, P = P_vals)
        ggplot(data, mapping = aes(x = t, y = P)) +
            geom_point(color = "blue") +
            labs(x = "time [months]", y = "Population")
        </input>
    </sage>
    <p>
        Sometimes (usually) an explicit formula is not going to be known.
        We can use the dynamic model equation itself to generate our sequence.
        The dynamic model gives us an equation to calculate a population at the end of a cycle based on the population at the beginning of the corresponding cycle.
        Because the equation relates a calculated value based on the previous value, we can only calculate one value at a time, instead of the vectorized all-at-once approach that was possible using the explicit formula.
        To repeat a calculation in a sequence of steps, we need to use a programming strategy called a <term>loop</term>.
        This approach is called an <term>iterative</term> calculation, because we <em>iterate</em> (or repeat) our calculation over and over again to find our results.
    </p>
    <p>
        In R, the most common type of loop is the <c>for</c>-loop.
        This uses a basic coding pattern <c>for (variable in vector) { command }</c>.
        The <c>vector</c> will be replaced by an actual vector (array) of values that we want to iterate over, applying the <c>command</c> to each of them in turn.
        The <c>variable</c> is replaced by a variable name that will store the corresponding value from the vector, one at a time, so that we can refer to the value by a name in <c>command</c>.
        We can use multiple commands if they are put on separate lines (or separated by semicolons).
    </p>
    <p>
        We will construct the same sequence of populations using an iterative approach.
        Our approach will compute two different sequences, one for the time of observation, and the other for the population value.
        And we will illustrate how we can do this in a tibble data-frame that was built to the size we wanted.
        R refers to positions in arrays starting at an index 1, but our starting time is typically starting at 0.
        The variable <c>n</c> in the code will refer to the index and not the time.
        To refer to the value in a vector at a given index, we use rectangular brackets with the index value inside, as in <c>P_vals[12]</c> would refer to the value in the vector <c>P_vals</c> at index position 12.
    </p>
    <sage language="r">
        <input>
        library(tidyr)
        library(ggplot2)

        # Set model parameters
        b &lt;- 50/400
        d &lt;- 40/400
        r &lt;- b - d
        P0 &lt;- 400
        dt &lt;- 1        # How much time between points

        # Set aside space for sequence values
        N_pts &lt;- 51    # How many points we want, including initial
        t_vals &lt;- double(N_pts)
        P_vals &lt;- double(N_pts)

        # First cycle starting values
        t_vals[1] &lt;- 0
        P_vals[1] &lt;- P0

        # Iterate through the model for remaining values
        for (n in 2:N_pts) {
            # New time is previous time + dt
            t_vals[n] &lt;- t_vals[n-1] + dt
            # New population using model
            P_vals[n] &lt;- P_vals[n-1] * (1+r)
        }

        # Plot the population
        data2 &lt;- tibble(t = t_vals, P = P_vals)
        ggplot(data2, mapping = aes(x = t, y = P)) +
            geom_point(color = "blue") +
            labs(x = "time [months]", y = "Population")
        </input>
    </sage>
    <p>
        Because computer calculations always work with approximations to exact numbers,
        computer arithmetic introduces various rounding errors as calculations take place.
        Different methods of calculation create different rounding errors.
        Consequently, sequences calculated explicitly are unlikely to exactly match those calculated iteratively.
        However, these errors are generally small enough that we won't notice the difference.
    </p>
</section>