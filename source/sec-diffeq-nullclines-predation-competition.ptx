<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      Mathematical Models in Biology         -->
<!--                                              -->
<!-- Copyright (C) 2017  D. Brian Walton          -->
<!-- See the file COPYING for copying conditions. -->
   
<section xml:id="seq-diffeq-nullclines-predation-competition">
    <title>Phase Plane Analysis with Nullclines, Competition and Predator-Prey Models</title>

    <introduction>
        <p>
            For a single autonomous differential equation <m>X' = f(X)</m>, solving the equation <m>f(X) = 0</m> allowed us to identify the equilibrium solutions.
            When we have an autonomous system of two differential equation,
            <md>
                <mrow>X' \amp = f_1(X,Y),</mrow>
                <mrow>Y' \amp = f_2(X,Y),</mrow>
            </md>
            solving a <em>single</em> equation like <m>f_1(X,Y) = 0</m> or <m>f_2(X,Y) = 0</m> is not quite finding an equilibrium.
            An equilibrium would require that <em>both</em> equations are satisfied for the same point.
            So what do we get when we think of an individual equation at a time?
        </p>
        <p>
            In the <m>(x,y)</m> phase plane, an equation of the form <m>f(x,y) = 0</m> generally describes a <em>curve</em> in the plane.
            In calculus, you would have learned about something called an <em>implicit function</em>.
            In a general sense, for each value of <m>x</m>, there can be zero, one, or more values of <m>y</m> that make the equation true.
            Near most such points, the solutions will follow some curve and the slope of that curve is calculated using the calculus strategy of <em>implicit differentiation</em>.
        </p>
        <p>
            While we don't need to focus heavily on the slope of the curve, we are interested in the idea that the equation <em>describes</em> a curve in the plane.
            Because the equation <m>f_1(X,Y)=0</m> represents points where <m>X</m> would have zero rate of change, the curve is called the <m>X</m>-<term>nullcline</term>.
            The curve satisfied by <m>f_2(X,Y)=0</m> is called the <m>Y</m>-nullcline.
            Any equilibrium solutions will correspond to the <em>intersections</em> of these two nullclines.
        </p>
        <p>
            In this section, we will discuss how finding or describing the nullclines can simplify the visualization of the phase plane.
            We can use intersection points to find equilibria.
            Instead of finding a full vector field, we can identify direction at a single point in each region formed by the nullclines to see general directions of motion.
            Sometimes, if it is clear that either all directions point toward the equilibrium or at least one direction points away, this is enough to determine the stability of equilibrium values.
        </p>
        <p>
            As our primary examples to motivate the analysis, we will discuss competition between two species. We will also return to the idea of predation and consider predator-prey models.
        </p>
    </introduction>

    <subsection xml:id="subsec-diffeq-competition-models">
        <title>Competition Models</title>
        <p>
            The Rusty crayfish is an invasive aquatic crustacean in Virginia.
            (See <url href="https://dwr.virginia.gov/wildlife/invasive-species/rusty-crayfish/"/>.)
            Native in Ohio, Kentucky, Tennessee, and Indiana, this crayfish was first reported in Virginia in 2011.
            The species competes for resources with native crayfish but consume resources at a much higher rate.
            Thus, the Rusty crayfish risks displacing native species but also has the potential to disrupt the aquatic environment of other native species who share the water.
        </p>
        <p>
            Invasive species are often studied in the context of <term>competition models</term>.
            We want to consider two species that are found in the same environment and compete for similar resources,
            such as populations of native crayfish and Rusty crayfish.
            If there were only one species present, we could model that species with a logistic differential equation.
            What does the presence of a competitor do to the model?
        </p>
        <p>
            If we imagined that a carrying capacity represents the available number of <em>slots</em> available for a species in the environment based on resource availability, then the presence of a competitor who uses some of those resources is effectively eliminating some of the available slots.
            From the perspective of per capita growth rates, we can imagine that the presence of a competitor has a negative effect on the species per capita rate.
        </p>
        <p>
            Let <m>N</m> represent the population size of native crayfish and let <m>R</m> represent the population size of Rusty crayfish.
            Each population would have its own intrinsic per capita growth rates and carrying capacities for the given environment, say <m>r_0</m> and <m>K</m> for the native population, and <m>q_0</m> and <m>M</m> for the invasive population.
            The presence of competitors <em>occupy</em> some of the resources of the other species, so we can model our two populations using modified logistic growth models,
            <md>
                <mrow>N' \amp = r_0 N(1 - \frac{N + \alpha R}{K}), </mrow>
                <mrow>R' \amp = q_0 N(1 - \frac{R + \beta N}{M}). </mrow>
            </md>
            The parameter <m>\alpha</m> represents the (fractional) number of native crayfish that would have the same impact on growth rates of native crayfish as <em>each</em> Rusty crayfish has.
            Similarly, the parameter <m>\beta</m> represents the (fractional) number of Rusty crayfish that would have an equivalent impact on Rusty crawfish growth rates compared to the presence of <em>each</em> native crayfish.
        </p>
    </subsection>
    
    <subsection xml:id='subsec-diffeq-nullcline-analysis'>
        <title>Nullcline Analysis</title>

        <p>
            A nullcline is a curve defining a collection of points in the phase plane at which <em>one</em> of the state variables has an instantaneous rate of change equal to zero.
            We need to emphasize the idea of instantaneous because other variables are likely changing so that the solutions immediately move off of the nullcline.
        </p>
        <p>
            For our competition model, the <m>N</m>-nullcline (where <m>N</m> has a zero rate of change) is characterized by points <m>(N,R)</m> at which
            <me> r_0 N(1 - \frac{N+\alpha R}{K}) = 0.</me>
            Similarly, the <m>R</m>-nullcline is characterized by points <m>(N,R)</m> at which 
            <me> q_0 R(1 - \frac{R+\beta N}{M}) = 0.</me>
            Because each equation is already written in a factored form, each nullcline consists of two distinct curves.
            The <m>N</m>-nullcline consists of the line for which <m>N=0</m> as well as a second line for which <m>N+\alpha R = K</m>.
            The <m>R</m>-nullcline consists of the lines for which <m>R=0</m> or <m>R+\beta N = M</m>.
        </p>
        <p>
            Just as we drew arrows on a phase line to see the direction of motion for a single state variable, we can use nullclines to decompose the phase plane into different regions where each state variable is increasing or decreasing.
            In the <m>(N,R)</m> phase plane, the <m>N</m>-nullcline includes a vertical line <m>N=0</m> and another line <m>N + \alpha R = K</m> that has an <m>N</m>-intercept (<m>R=0</m>) at <m>N=K</m> and an <m>R</m> intercept at <m>R = \frac{1}{\alpha}K</m>.
            We check the <em>sign</em> of the rate formula <m>r_0 N (1 - \frac{N+\alpha N}{K})</m> to determine if <m>N</m> is increasing or decreasing.
            When <m>N \gt 0</m> is <em>larger</em> than the second line, we have <m>N</m> <em>decreasing</em>.
            When <m>N \gt 0</m> is <em>smaller</em> than the second line, we have <m>N</m> <em>increasing</em>.
            Having <m>N \lt 0</m> is not biological for populations, but mathematically, we would have a reversal of signs because of the factor <m>r_0 N</m> being negative.
        </p>
        <p>
            We have a similar evaluation for the variable <m>R</m>.
            The <m>R</m> nullcline has a horizontal line <m>R=0</m> as well as a line with slope <m>\beta</m>.
            That second line has an <m>N</m>-intercept at <m>N=\frac{1}{\beta}M</m> and a <m>R</m>-intercept at <m>R=M</m>.
            Regions of where <m>R</m> is increasing or decreasing is analogous to that of <m>N</m>.
        </p>
        <p>
            Both nullclines are visualized in <xref ref="fig-competition-nullclines-directions"/> along with directions of motion for <m>N</m> and <m>R</m>.
            The behaviors are shown in separate graphs because we still need to consider the relative position of the nullclines to each other.
        </p>
        <figure xml:id="fig-competition-nullclines-directions">
            <caption><m>N</m> (left) and <m>R</m> (right) nullclines as well as regions of the phase plane marked by whether the state variable is increasing or decreasing.</caption>
            <sidebyside>
                <image source="images/competition-N-null-directions">
                    <shortdescription>N-nullcline and regions where N is increasing or decreasing</shortdescription>
                </image>
                <image source="images/competition-R-null-directions">
                    <shortdescription>R-nullcline and regions where R is increasing or decreasing</shortdescription>
                </image>
            </sidebyside>
        </figure>
        <p>
            In order to analyze the dynamics, we consider the ordering of the <m>N</m>- and <m>R</m>-intercepts.
            For <m>N</m>-intercepts, we either have <m>K \lt \frac{1}{\beta} M</m> or <m>\frac{1}{\beta} M \lt K</m>.
            (There is also an exceptional case where they are equal, but the analysis for this would distract from our basic understanding.)
            Similarly, the <m>R</m>-intercepts have two possible orderings.
            Considering all of the combinations, there are four basic orderings possible, shown in <xref ref="fig-competition-all-nullcline-orderings"/>.
        </p>
        <figure xml:id="fig-competition-all-nullcline-orderings">
            <caption>All possible orderings of the intercepts and resulting relative positions for the <m>N</m>- and <m>R</m>-nullclines for the competition model.</caption>
            <sidebyside>
                <image source="images/competition-pp-N-null-over-R">
                    <shortdescription>N-nullcline intercepts are both above the R-nullcline intercepts</shortdescription>
                </image>
                <image source="images/competition-pp-NR-equil-outside">
                    <shortdescription>nullclines cross with equilibria intercepts above the non-equilibria intercepts</shortdescription>
                </image>
            </sidebyside>
            <sidebyside>
                <image source="images/competition-pp-NR-equil-inside">
                    <shortdescription>nullclines cross with non-equilibria intercepts above the equilibria intercepts</shortdescription>
                </image>
                <image source="images/competition-pp-R-null-over-N">
                    <shortdescription>R-nullcline intercepts are both above the N-nullcline intercepts</shortdescription>
                </image>
            </sidebyside>
        </figure>
        <p>
            In each region of <xref ref="fig-competition-all-nullcline-orderings"/>, we have included a single pair of direction arrows showing whether <m>N</m> and <m>R</m> are increasing or decreasing, with a composite direction formed by the addition of those vectors.
            Notice how the <m>N</m>-direction reverses when we cross the <m>N</m>-nullcline.
            This is analogous to ordinary functions changing sign when the variable passes through a root.
            (Caution: A function can in general have a root without changing sign, like a parabola touching the axis at a single point; the same could happen with nullclines.)
        </p>
        <p>
            Points where the <m>N</m>-nullcline intersects the <m>R</m>-nullcline are equilibrium points.
            There are three equilibria that appear in every situation.
            The equilibrium <m>(N,R) = (0,0)</m> corresponds to mutual extinction, where neither population is present.
            The equilibrium <m>(N,R) = (K,0)</m> corresponds to the situation where the native crayfish are at their carrying capacity and there are no Rusty crayfish present.
            Conversely, the equilibrium <m>(N,R) = (0,M)</m> corresponds to the situation where the Rusty crayfish are at their carrying capacity having completely wiped out the native population.
            There are two cases where the nullclines intersect in the region with <m>N \gt 0</m> and <m>R \gt 0</m>.
            It is possible to solve for the exact location of that point, but we will just call it <m>(N,R) = (N^*, R^*)</m>.
        </p>
        <p>
            The directions of the vectors help us to recognize which equilibria are stable and which are stable.
            If the direction arrows point toward an equilibrium in every region that surrounds the equilibrium, it must be stable.
            If there is at least one region for which it is clear that direction arrows point away from the equilibrium, it must be unstable.
            There can also be a case (not illustrated in this example) where it looks like direction arrows look like they would go around an equilibrium.
            In that case, we would require another analysis method (involving eigenvalues) to determine stability.
        </p>
        <p>
            In all cases, the equilibrium <m>(N,R)=(0,0)</m> is <em>unstable</em>.
            For points near the equilibrium but with <m>N \gt 0</m> and <m>R \gt 0</m>, we see that both <m>N</m> and <m>R</m> will increase, forcing solutions to move away from the equilibrium.
            Biologically, this means that an environment with no crayfish of either species for which we introduce new crayfish, those crayfish populations will (at least initially) grow.
        </p>
        <p>
            Next, let us consider the equilibrium <m>(N,R) = (K,0)</m>.
            In <xref ref="fig-competition-all-nullcline-orderings"/>, the top two cases and bottom two cases show different behaviors, based on the ordering of the <m>N</m>-intercepts.
            In the top cases, where <m>N=K</m> (the equilibrium) is greater than <m>N=\frac{1}{\beta} M</m> (the <m>N</m>-intercept of the <m>R</m>-nullcline), the regions around the equilibrium have all direction arrows pointing toward the equilibrium.
            Consequently, in these cases the equilibrium <m>(K,0)</m> would be <em>stable</em>.
        </p>
        <p>
            Biologically, the equilibrium <m>(K,0)</m> represents the pre-invasion state of the ecosystem.
            The native population has reached its own carrying capacity and is at equilibrium.
            Stability means that when the new species is introduced with a few individuals, corresponding to moving to a point in the phase plane just above the equilibrium, the population will be driven back toward just one population.
            The invading species would disappear and the invasion attempt would be unsuccessful.
        </p>
        <p>
            In the other two cases, where <m>N=K</m> is less than <m>N=\frac{1}{\beta}M</m>, the regions around the equilibrium show the <m>N</m> directions point toward the equilibrium but the <m>R</m> directions point away from the equilibrium.
            In these cases, the equilibrium <m>(K,0)</m> is <em>unstable</em>.
            Biologically, this would mean that when a few Rusty crayfish enter a native population of crayfish at equilibrium, the Rusty crayfish population is able to grow, moving the system away from equilbrium.
            This would be a successful invasion.
        </p>
        <p>
            The equilibrium <m>(N,R) = (0,M)</m> will be essentially analogous to the previous discussion, except with the roles of <m>N</m> and <m>R</m> reversed.
            Biologically, this refers to an ecosystem that only contains the Rusty crayfish.
            In the context of the invasion, since we had to start with just the native population, this would conceptually be an equilibrium corresponding to a complete takeover by the invader.
            Being a stable equilibrium would mean that reintroducing a few native crayfish without eliminating the Rusty crayfish would have no impact.
        </p>
        <p>
            There is a fourth equilibrium in the positive quadrant <m>(N,R) = (N^*,R^*)</m> in two of the four cases shown in <xref ref="fig-competition-all-nullcline-orderings"/>.
            Notice that this extra equilibrium has stability that is opposite that of <m>(K,0)</m> and <m>(0,M)</m>.
            In the top-right case where <m>K \gt \frac{1}{\beta}M</m> and <m>M \gt \frac{1}{\alpha}K</m>, both of the single population equilibria are stable, but the interior equilibrium <m>(N^*,R^*)</m> is unstable because solutions in the narrow wedges have directions moving away from the equilibrium.
            This case corresponds to a scenario in which a single population is resistant to invasion by the other, regardless of which population happened to have initially colonized the area.
        </p>
        <p>
            In the bottom-left case, the two single population equilibria are both unstable, but the interior equilibrium is stable.
            This corresponds to a scenario where both types of crayfish are susceptbile to an invasion, but the invasion results in a stable equilibrium where both species coexist.
            This would typically only happen for two species that have weak competition, where the presence of one slows the other, but there are enough resources needs that do not overlap that both species can be self-sustaining in the presence of the other.
        </p>
    </subsection>
    <subsection xml:id="subsec-diffeq-predator-prey">
        <title>The Predator-Prey Model</title>
        <p>
            We previously considered a producer-consumer model between two species.
            We will revisit a simplified version of that model called the <term>Lotka-Volterra Predator Prey model</term>.
            We think of the producer species as any prey species, and the consumer species is the predator species.
            For example, we might consider a prey species as being field mice and the predator species as being owls.
        </p>
        <p>
            The model will be simplified in that the prey species does not have logistic growth but is modeled with a constant per capita growth rate.
            If we let <m>M</m> represent the mouse population size and <m>O</m> represent the owl population size, then the Lotka-Volterra model would be written as the system of differential equations
            <md>
                <mrow> M' \amp = r_M M - b M O, </mrow>
                <mrow> O' \amp = -r_O O + c M O. </mrow>
            </md>
        </p>
        <p>
            Factoring the equations will make the nullclines more apparent, so we rewrite our model as
            <md>
                <mrow> M' \amp = M(r_M  - b O), </mrow>
                <mrow> O' \amp = O(-r_O + c M). </mrow>
            </md>
            The <m>M</m> nullcline in the <m>(M,O)</m> phase plane will be found from <m>M=0</m> or <m>1 - \frac{b}{r_M}O = 0</m>, corresponding to the <em>vertical</em> line <m>M=0</m> and the <em>horizontal</em> line <m>O = \frac{r_M}{b}</m>.
            Similarly, the <m>O</m> nullcline will consist of the  <em>horizontal</em> line <m>O=0</m> and the <em>vertical</em> line <m>M = \frac{r_O}{c}</m>.
        </p>
        <p>
            Directions for the rates of change in the positive quadrant can be characterized by looking at the sign of the rate formulas on either side of the nullclines.
        </p>
        <p>
            For the mice <m>M \gt 0</m>, if <m>O \gt \frac{r_{M}}{b}</m> (many owls), the rate of change in the mouse population will be negative.
            Owls are eating mice faster than they are able to reproduce because there are so many owls.
            However, when <m>O \lt \frac{r_{M}}{b}</m>, the rate of reproduction now exceeds predation by owls and the mouse population is able to grow.
        </p>
        <p>
            Similarly, for the owls, if <m>M \gt \frac{r_{O}}{c}</m> (many mice), the rate of change for the owl population will be positive.
            There is plenty of food for the owls and the owl population will be increasing.
            On the other hand, if <m>M \lt \frac{r_{O}}{c}</m> (few mice), the rate of change for the owl population will be negative and the owl population will decrease.
        </p>
        <p>
            The phase plane with nullclines and directions of motion are illustrated in <xref ref="fig-predator-prey-pp-nullclines"/>.
            Notice that there are exactly two equilibria, where <m>(M,O)=(0,0)</m> represents mutual extinction and <m>(M,O) = (\frac{r_O}{c}, \frac{r_M}{b})</m> represents both species coexisting.
        </p>
        <figure xml:id="fig-predator-prey-pp-nullclines">
            <caption>Nullclines in the <m>(M,O)</m> phase space for the owl-mice predator-prey model. </caption>
            <image width="60%" source="images/predator-prey-pp-nullclines">
                <shortdescription>N-nullcline intercepts are both above the R-nullcline intercepts</shortdescription>
            </image>
        </figure>
        <p>
            The vector field directions this time are only partly helpful in understanding stability.
            The equilibrium for extinction is clearly unstable based on directions of the vector field, since a small introduction of mice into the environment will result in mice growing exponentially.
            However, the vector field does not show clearly what happens for the coexisting equilibrium<mdash/>the vector field seems to rotate around the equilibrium point, rather than flow in or out of it.
            We need deeper analysis than just the picture to determine what happens here.
        </p>
    </subsection>
    <subsection xml:id="subsec-diffeq-nullclines-code">
        <title>Generating Nullcline Curves in R</title>
        <p>
            The discussion earlier was algebra-centered.
            Using nullclines is often a qualitative method that we use in a preliminary setting and may not be included in our final analysis.
            Sometimes, we our nullclines can be easily visualized in terms of graphs that we know, such as the lines that appeared in our earlier examples.
            At other times, we might not see how to express the nullclines in a way that makes it easy for us to graph.
        </p>
        <p>
            One option would be to use a graphing tool like <url href="https://desmos.com/calculator">desmos.com</url> where you can type an equation, although you need to use <m>x</m> and <m>y</m> as your state variables.
            An advantage here is that if you use parameter names, you get automatic sliders to adjust any of those parameters and can explore the effect of changing them.
            Other tools might also be able to do this, often using a command to create <term>implicit plots</term>.
        </p>
        <p>
            This section introduces some ideas for how we can visualize the results in R using contour plots.
            We might want to do this so that everything is integrated together into a single document.
            It would also allow us to overlay solution trajectories on a graph that shows the nullclines if desired.
        </p>
        <p>
            When we calculate a vector field at a grid of points, we gain some a lot of information.
            Nullclines are significant because they show where one of the directions rate functions goes to zero.
            Usually, the vector field changes direction for a state variable when we cross that state's nullcline.
            This would be a change of sign in the data calculated for our vector field.
        </p>
        <p>
            A <term>contour graph</term> takes a grid of two variables and a function or data that is evaluated at each point in the grid and shows curves where the value of the function or data changes between various levels.
            To find a nullcline, we want to find a curve where the data crosses the value of zero, thereby separating the data into two regions for positive and negative.
        </p>
        <p>
            If we know how to create a vector field for a differential equation, we can use the same setup to estimate the nullclines.
            However, we often want a more closely-spaced grid of points for a nullcline in order to make the estimate smooth, so we probably don't want to use the exact same grid data.
        </p>
        <example>
            <statement>
                <p>
                    For our first example, let us generate an estimate of the nullclines for the competition model.
                    We will use state variables <m>X</m> and <m>Y</m> for the system of differential equations with
                    <md>
                        <mrow>X' \amp = r_1 X(1-X-\alpha Y)</mrow>
                        <mrow>Y' \amp = r_2 Y(1-Y-\beta X)</mrow>
                    </md>
                    so that our carrying capacities are <m>K=1</m> and <m>M=1</m>, respectively.
                    We will choose <m>\alpha = 0.75</m> and <m>\beta = 1.1</m>, and <m>r_1 = 0.2</m> and <m>r_2 = 0.3</m>.
                </p>
                <listing xml:id="listing-competition-model-R-nullclines">
                    <program language="r">
                        <code>
                        <![CDATA[ 
                        # Define our parameters
                        my_p <- c(r1 = 0.2, r2 = 0.3, alpha = 0.75, beta = 1.1)

                        # Define our rate functions
                        f1 <- function(X, Y, params) {
                            with(as.list(params),
                                r1 * X * (1 - X - alpha * Y)
                            )
                        }
                        f2 <- function(X, Y, params) {
                            with(as.list(params),
                                r2 * Y * (1 - Y - beta * X)
                            )
                        }

                        # Make a vector field grid (relatively wide spacing)
                        library(dplyr)  # To get mutate (add extra columns)
                        vf_grid <- expand.grid(X = seq(-0.5, 1.5, by = 0.2),
                                               Y = seq(-0.5, 1.5, by = 0.2)) |>
                            mutate(dXdt = f1(X, Y, my_p),
                                   dYdt = f2(X, Y, my_p)) |>
                            # rescale by speed
                            mutate(speed = sqrt(dXdt^2 + dYdt^2)) |>
                            mutate(Xdir = dXdt / speed,
                                   Ydir = dYdt / speed)
                        
                        # Make a contour grid (relatively close spacing)
                        contour_grid <- expand.grid(X = seq(-0.5, 1.5, by = 0.02),
                                               Y = seq(-0.5, 1.5, by = 0.02)) |>
                            mutate(dXdt = f1(X, Y, my_p),
                                   dYdt = f2(X, Y, my_p))
                        
                        # Make a graph showing the vector field and nullclines
                        library(ggplot2)
                        library(ggquiver)
                        nullcline_graph <- ggplot() +
                            # Vector field
                            geom_quiver(data = vf_grid,
                                        mapping = aes(x = X, y = Y,
                                                      u = Xdir, v = Ydir),
                                        vecsize = 0.25) +
                            # X nullcline
                            geom_contour(data = contour_grid,
                                         mapping = aes(x = X, y = Y, 
                                                       z = dXdt, color = "X"),
                                         breaks = c(0), linetype = "dashed") + 
                            # Y nullcline
                            geom_contour(data = contour_grid,
                                         mapping = aes(x = X, y = Y, 
                                                       z = dYdt, color = "Y"),
                                         breaks = c(0), linetype = "dashed") +
                            # Legend update
                            scale_color_discrete(breaks = c("X","Y"), name = "nullcline")
                        show(nullcline_graph)
                        ]]>
                        </code>
                    </program>
                </listing>
                <figure xml:id="fig-competition-model-R-nullclines">
                    <caption>Nullclines and vector field associated with the competition model given in the <xref ref="listing-competition-model-R-nullclines"/></caption>
                    <image width="60%" source="images/competition-model-R-nullclines.png">
                        <shortdescription>generated graph showing nullclines and vector field described in listing</shortdescription>
                    </image>
                </figure>
            </statement>
        </example>
        <p>
            A disadvantage of using contours from data as opposed to an algebraic approach is that we have to choose specific model parameters.
            An algebraic approach can allow us to recognize how the nullclines will change as we adjust various parameters.
        </p>
        <p>
            A second issue is that we only get an approximation, and sometimes the result is not quite accurate.
            For example, the nullcline that was created for the competition model in the example above used <c>by = 0.02</c> for the grid used by the <c>contour</c> command.
            If we changed that to <c>by = 0.06</c>, we would see a result where there appears to be a gap in the nullclines.
            What is happening is that at the point where the nullcline intersects itself, unless we happen to include that point in the grid, the algorithm doesn't know the point exists and allows two regions on opposite sides of the point to merge to a single region.
        </p>
        <figure xml:id="fig-competition-model-R-nullclines-poor">
            <caption>Recreated <xref ref="fig-competition-model-R-nullclines-poor"/> with <c>by=0.06</c>, which results in a gap in the nullclines</caption>
            <image width="60%" source="images/competition-model-R-nullclines-poor.png">
                <shortdescription>remade graph showing nullclines and vector field described in listing with different step size</shortdescription>
            </image>
        </figure>
    </subsection>
</section>