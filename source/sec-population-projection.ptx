<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the book                -->
<!--                                              -->
<!--      Mathematical Models in Biology         -->
<!--                                              -->
<!-- Copyright (C) 2017  D. Brian Walton          -->
<!-- See the file COPYING for copying conditions. -->
   
<section xml:id="population-projection">
<title>Recursive Models Using Projection</title>

<introduction>
    <p>
        In the previous section, we considered a recursive formula for the new population in terms of the per capita net growth rate, <m>r(P)</m>, where the new population is computed by the difference equation 
        <me>P_{n+1} - P_n  = r(P_n) \cdot P_n,</me>
        which is equivalent to the recursive formula 
        <me>P_{n+1} = P_n + r(P_n) \cdot P_n.</me>
        The basic idea to the difference equation is that <m>r(P) \cdot P</m> is the formula for the increment of change in the population, which is why that formula is added to the previous population.
    </p>
    <p>
        In this section, we introduce an alternative way of thinking about computing the new population. 
        In the above model, we effectively were thinking about the <em>change in the population</em> as a function of the previous population (specifically by thinking of the per capita rate as a function).
        We turn our attention now to thinking of the new population as itself being a function of the previous population.
        This function is called the <term>projection function</term>.
    </p>
</introduction>

<subsection xml:id="projection-functions">
    <title>Projection Functions</title>
    
    <p>
        A sequence <m>x=(x_n)</m> is defined <term>recursively</term> if you have a formula to compute <m>x_{n+1}</m> in terms of the value for <m>x_n</m>.
        Generally, we have an equation that is solved for the new value in the form of 
        <me>x_{n+1} = f(x_n)</me>.
        That is, the equation has been rewritten so that the <em>new</em> value is isolated on one side of the equation and is equal to some formula involving the <em>previous</em> value of the sequence.
        We then think of the formula involving <m>x_n</m> as a <em>function</em> of <m>x_n</m>.
        That function is named the <term>projection function</term> for the sequence because it allows us to <em>project</em> (i.e., forecast) the next value of the sequence knowing the current value in the sequence.
    </p>
    
    <example>
        <p>
            The difference equation <m>P_{n+1} - P_n = r P_n</m> with an initial value defines a sequence recursively.
            This is the model for constant per capita growth rates.
            If we solve this equation for <m>P_{n+1}</m>,
            <me>P_{n+1} = P_n + r P_n</me>,
            we think of the right hand side as the projection function, <m>f(P_n) = P_n + r P_n</m>.
            In terms of a simple variable (change <m>P_n</m> to <m>x</m>), the projection function is defined by
            <me>f(x) = x+rx = (1+r)x</me>.
        </p>
        <p>
            We saw earlier that this sequence results in geometric sequences that grow or decay exponentially.
            If we generate this sequence <m>P = (P_0, P_1, P_2, \ldots)</m> and look at the relation <m>(P_n, P_{n+1})</m>, all of those points are on the graph of the projection function <m>y=(1+r)x</m>.
            The following code generates the sequence recursively and demonstrates this relation.
        </p>
        <listing>
            <program language="r">
            library(tidyr)   # for tibble
            library(ggplot2) # for ggplot

            # Set values for the model parameters and initial value
            r &lt;- 0.25
            P0 &lt;- 10

            # Specify the size of the sequence and create space in memory
            num_pts &lt;- 50
            P &lt;- double(num_pts)

            # Generate the sequence
            P[1] &lt;- P0
            for (n in 2:num_pts) {
                P[n] &lt;- (1+r) * P[n-1]
            }
            # Store as P_start and P_end
            seq_data &lt;- tibble(P_start = P[1:(num_pts-1)],
                                  P_end=P[2:num_pts])

            # Generate a graph of the projection function
            # Create x-values between 0 and the largest value of P in our data
            x_vals &lt;- seq(from=0, to=max(P), length=500)
            # Vectorized calculation of y = f(x)
            y_vals &lt;- (1+r)*x_vals

            # Create a plot with sequential values (P_n,P_(n+1)) and y=f(x)
            ggplot(data = NULL,   # different data for different layers 
                  mapping = aes(x = P_start, y = P_end, color = "sequence")) +
              geom_point(data = seq_data, size=3) +
              geom_path(mapping = aes(x = x_vals, y = y_vals, color = "projection")) +
              scale_color_manual(values=c("sequence"="blue", "projection"="black"))
            </program>
        </listing>
        <sage language="r"><input/></sage>
    </example>

    <example>
        <p>
            The difference equation <m>P_{n+1} - P_n = (r_0 - a P_n) P_n</m> is the difference equation perspective for the discrete logistic model.
            Solving this equation for <m>P_{n+1}</m> gives
            <me>P_{n+1} = (1+r_0) P_n - P_n^2</me>.
            The projection function must therefore be <m>f(P_n) = (1+r_0) P_n - a P_n^2</m>.
            More simply written, the projection function for the discrete logistic model is
            <me>f(x) = (1+r_0) x - ax^2</me>.
        </p>
        <p>
            Again, if we generate a sequence to follow this model, each point in the relation <m>(P_n, P_{n+1})</m> will be on the graph of the projection function <m>y=f(x)</m>.
        </p>
        <listing>
            <program language="r">
            library(tidyr)   # for tibble
            library(ggplot2) # for ggplot

            # Set values for the model parameters and initial value
            r0 &lt;- 0.4
            a &lt;- 0.001
            P0 &lt;- 10

            # Specify the size of the sequence and create space in memory
            num_pts &lt;- 50
            P &lt;- double(num_pts)

            # Generate the sequence
            P[1] &lt;- P0
            for (n in 1:(num_pts-1)) {
                P[n+1] &lt;- (1+r0) * P[n] - a * P[n]^2
            }
            # Store as P_start and P_end
            seq_data &lt;- tibble(P_start = P[1:(num_pts-1)],
                                  P_end=P[2:num_pts])

            # Generate a graph of the projection function
            # Create x-values between 0 and the largest value of P in our data
            x_vals &lt;- seq(from=0, to=max(P), length=500)
            # Vectorized calculation of y = f(x)
            y_vals &lt;- (1+r0) * x_vals - a * x_vals^2

            # Create a plot with sequential values (P_n,P_(n+1)) and y=f(x)
            ggplot(data = NULL,   # different data for different layers 
                  mapping = aes(x = P_start, y = P_end, color = "sequence")) +
              geom_point(data = seq_data, size=3) +
              geom_path(mapping = aes(x = x_vals, y = y_vals, color = "projection")) +
              scale_color_manual(values=c("sequence"="blue", "projection"="black"))
            </program>
        </listing>
        <sage language="r"><input/></sage>
    </example>

    <example>
        <p>
            Not all recursive sequences have biological motivations.
            In Calculus, Newton's method is frequently taught as a way to find the positive square root of any positive number <m>a \gt 0</m>.
            The square root <m>\sqrt{a}</m> is the positive solution to <m>x^2-a=0</m>.
            Newton's method involves creating a sequence using the recursive equation
            <me>x_n^2 - a + 2x_n(x_{n+1}-x_n) = 0</me>.
            Solving this equation for <m>x_{n+1}</m>, we find the equation that writes <m>x_{n+1}</m> as a function of <m>x_n</m>,
            <me>x_{n+1} = \frac{x_n}{2} + \frac{a}{2x_n} = f(x_n)</me>.
            The projection function in this example is
            <me>f(x) = \frac{x}{2} + \frac{a}{2x}.</me>
        </p>
        <p>
            The sequence generated in the code below solves for <m>\sqrt{3}</m> by using <m>a=3</m>.
            The initial value was chosen as <m>a=1</m>.
            The relation <m>(x_n, x_{n+1})</m> is graphed along with <m>y=f(x)</m>.
            The method converges very quickly, so not many distinct points appear.
        </p>
        <listing>
            <program language="r">
            library(tidyr)   # for tibble
            library(ggplot2) # for ggplot

            # Set values for the model parameters and initial value
            a &lt;- 3
            x0 &lt;- 1

            # Specify the size of the sequence and create space in memory
            num_pts &lt;- 20
            newton &lt;- double(num_pts)

            # Generate the sequence
            newton[1] &lt;- x0
            for (n in 1:(num_pts-1)) {
                newton[n+1] &lt;- newton[n]/2 + a/(2 * newton[n])
            }
            # Store as x_start and x_end
            seq_data &lt;- tibble(x_start = newton[1:(num_pts-1)],
                                  x_end=newton[2:num_pts])

            # Generate a graph of the projection function
            # Create x-values between 0 and the largest value of P in our data
            x_vals &lt;- seq(from=min(newton), to=max(newton), length=200)
            # Vectorized calculation of y = f(x)
            y_vals &lt;- x_vals / 2 + a / (2 * x_vals)

            # Create a plot with sequential values (P_n,P_(n+1)) and y=f(x)
            ggplot(data = NULL,   # different data for different layers 
                  mapping = aes(x = x_start, y = x_end, color = "sequence")) +
              geom_point(data = seq_data, size=3) +
              geom_path(mapping = aes(x = x_vals, y = y_vals, color = "projection")) +
              scale_color_manual(values=c("sequence"="blue", "projection"="black"))
            </program>
        </listing>
        <sage language="r"><input/></sage>
    </example>
    
    <p>
        In each of our examples above, we started with sequences defined recursively and showed that the relation <m>(x_n, x_{n+1})</m> always matched the graph <m>y=f(x)</m> for the projection function <m>f</m>.`
        The projection function is the rule that when given the value of <m>x_n</m>, we can predict the value of <m>x_{n+1} = f(x_n)</m>.
        From a modeling perspective, we <em>find</em> projection functions by looking at the relation given by the scatter plot of <m>(x_n, x_{n+1})</m> when data are available and find an appropriate function.
        When data are not available, we can construct hypotheses for the relation and build an appropriate model to explore the behavior if such a model were relevant.
    </p>
    
    <example>
        <statement>
            <p>
                The table below gives the values of a sequence <m>z_n</m> for <m>n=0,\ldots,10</m>. 
                Analyze the data to find a reasonable projection function.
            </p>
            <table>
                <tabular>
                    <col right="major"/>
                    <col align="right"/>
                    <row bottom="major"><cell><m>n</m></cell> <cell><m>z_n</m></cell></row>
                    <row><cell><m>0</m></cell> <cell><m>1.00</m></cell></row>
                    <row><cell><m>1</m></cell> <cell><m>3.42</m></cell></row>
                    <row><cell><m>2</m></cell> <cell><m>10.21</m></cell></row>
                    <row><cell><m>3</m></cell> <cell><m>17.99</m></cell></row>
                    <row><cell><m>4</m></cell> <cell><m>6.50</m></cell></row>
                    <row><cell><m>5</m></cell> <cell><m>15.80</m></cell></row>
                    <row><cell><m>6</m></cell> <cell><m>11.95</m></cell></row>
                    <row><cell><m>7</m></cell> <cell><m>17.32</m></cell></row>
                    <row><cell><m>8</m></cell> <cell><m>8.37</m></cell></row>
                    <row><cell><m>9</m></cell> <cell><m>17.52</m></cell></row>
                    <row><cell><m>10</m></cell> <cell><m>7.82</m></cell></row>
                </tabular>
            </table>
        </statement>
        <solution>
            <p>
                We start by creating a plot of the projection relation, corresponding to a scatter plot of points <m>(z_n,z_{n+1})</m>. 
                When <m>n=0</m>, we have <m>(z_0,z_1) = (1.0, 3.42)</m>. 
                The next few points are expressed below: 
                <md>
                    <mrow> n=1 \quad \Rightarrow \quad (z_1,z_2) = (3.42, 10.21) </mrow>
                    <mrow> n=2 \quad \Rightarrow \quad (z_2,z_3) = (10.21, 17.99) </mrow>
                    <mrow> n=3 \quad \Rightarrow \quad (z_3,z_4) = (17.99, 6.50) </mrow>
                </md>
                We can create this graph in R using the following script.
                Our original set of data had index values <m>n=0, 1, \ldots, 10</m>, which corresponds to 11 points.
                However, when we think of our data as values before/after, there can be at most 10 pairs.
                The code below defines columns that use a subset of the entries.
            </p>
            <listing>
                <program language="r">
                    library(tidyr)
                    library(ggplot2)
                    
                    # Create the sequence vector directly
                    z &lt;- c(1.00, 3.42, 10.21, 17.99, 6.50, 15.80, 11.95, 17.32, 8.37, 17.52, 7.82)
                    N &lt;- length(z)
                    # z_start has all but the last value; z_end has all but the first value
                    z_data &lt;- tibble(z_start = z[1:N-1], z_end = z[2:N])

                    # Graph the relation
                    ggplot(data = z_data,
                           mapping = aes(x = z_start, y = z_end)) +
                      geom_point(color="blue")
                </program>
            </listing>
            <figure>
                <image source="images/projection-from-data-01.png"/>
            </figure>
            <sage language="r"><input/></sage>
            <p>
                The figure strongly suggests the shape of a parabola so that the relation likely involves a quadratic formula.
                A quadratic function has the form <m>f(x) = ax^2 + bx + c</m>, which we could rewrite in the form <m>f(x) = c + bx + ax^2</m>.
                This can be interpreted as a <em>linear</em> model with a <m>y</m>-intercept <m>c</m> and two explanatory variables coming from <m>x</m> and <m>x^2</m>.
                We can continue our script to estimate the coefficients for the model by using <c>lm</c> with <c>formula = y ~ x + x2</c> where <c>x2</c> is going to be an extra column defined by <c>x2 = x^2</c>.
                Add the following code to the script defined above or after having already executed the code above.
            </p>
            <listing>
                <program language="r">
                    # Add new columns to z_data
                    library(dplyr)
                    z_data |&gt;
                      mutate(z = z_start) |&gt;  # z is a simpler name than z_start
                      mutate(z2 = z^2) -&gt;
                      z_data2
                    # Do linear model
                    z_model &lt;- lm(formula = z_end ~ z + z2, data = z_data2)
                    z_model$coefficients
                </program>
            </listing>
            <console language="r">
                <output>
                 (Intercept)             z            z2 
                0.0005194086  3.6003271165 -0.1800141078 
                 </output>
            </console>
            <sage language="r"><input/></sage>
            <p>
                From the regression, we see that we have values <m>a = -0.180014</m>, <m>b = 3.600327</m>, and <m>c = 0.0005194</m>.
                Based on those values, we could construct a sequence using the recursive equation
                <me>z_{n+1} = 0.0005194 + 3.600327 z_n - 0.180014 z_n^2</me>.
                Our original sequence data only showed two decimal places in the values, so we should think of our coefficients as having their own uncertainty.
                Let's compare what happens with the sequence using those estimated values with another sequence using the very similar <m>u_{n+1} = 3.6 u_n - 0.18 u_n^2</m>.
                The code below also illustrates how we can format a table.
            </p>
            <listing>
                <program language="r">
                    # Model parameters
                    a &lt;- -0.180014
                    a2 &lt;- -0.18
                    b &lt;- 3.600327
                    b2 &lt;- 3.6
                    c &lt;- 0.0005194
                    
                    # Initial value
                    z0 &lt;- 1.00
                    num_pts &lt;- 10

                    # Build the sequences z and u
                    z &lt;- double(num_pts + 1)
                    u &lt;- double(num_pts + 1)
                    z[1] &lt;- z0
                    u[1] &lt;- z0
                    for (n in 1:num_pts) {
                        z[n+1] &lt;- c + b * z[n] + a * z[n]^2
                        u[n+1] &lt;- b2 * u[n] + a2 * u[n]^2
                    }

                    # Layout a table showing the values
                    my_data &lt;- tibble(t = 0:num_pts, z = z, u = u)
                    print(my_data)
                </program>
            </listing>
            <console language="r">
                <output><![CDATA[
                # A tibble: 11 × 3
                    t     z     u
                <int> <dbl> <dbl>
                1     0  1     1   
                2     1  3.42  3.42
                3     2 10.2  10.2 
                4     3 18.0  18.0 
                5     4  6.50  6.50
                6     5 15.8  15.8 
                7     6 12.0  11.9 
                8     7 17.3  17.3 
                9     8  8.38  8.37
                10     9 17.5  17.5 
                11    10  7.80  7.82
                ]]></output>
            </console>
            <sage language="r"><input/></sage>

            <p>
                Perhaps surprisingly, the rounded model did better than the fitted values.
                Why would this happen?
                The actual values of the original sequence, which I generated with a computer using the simplified parameters, were rounded in order to present them with two decimal places.
                Thus our starting sequence had built-in errors.
                When we calculated our parameters using the linear model, we did in fact find the model that matched our results with the least squared errors for the rounded sequence.
                However, the fitted equation did not reproduce the sequence because it actually models a nearby sequence.
                If we had worked with more decimal values in the original sequence, we would have found a closer model.
            </p>
            <p>
                To close the topic, the two projection functions will be visually indistinguishable in a figure.
                So the code below generates the graph of the original sequence as points coupled with a smooth graph showing the projection function.
            </p>
            <listing>
                <program language="r">
                library(tidyr)   # for tibble
                library(ggplot2) # for ggplot

                # Original sequence
                z &lt;- c(1.00, 3.42, 10.21, 17.99, 6.50, 15.80, 11.95, 17.32, 8.37, 17.52, 7.82)
                # Create the before/after pairings
                z_proj_data &lt;- tibble(z_start = z[1:10], z_end = z[2:11])

                # Data for the projection function
                x &lt;- seq(from = 0, to = 20, length=200)
                y &lt;- 3.6 * x - 0.18 * x^2

                # Create a plot with sequential values (P_n,P_(n+1)) and y=f(x)
                ggplot(data = NULL,   # different data for different layers 
                      mapping = aes(x = z_start, y = z_end, color = "sequence")) +
                    geom_point(data = z_proj_data, size=3) +
                    geom_path(mapping = aes(x = x, y = y, color = "projection")) +
                    scale_color_manual(values=c("sequence"="blue", "projection"="black"))
                </program>
            </listing>
        <sage language="r"><input/></sage>
            <figure>
                <image source="images/proj-function-quadratic-example"/>
            </figure>
        </solution>
    </example>
</subsection>

<subsection xml:id='projection-fixed-points'>
    <title>Fixed Points and Equilibria</title>
    
    <p>An <term>equilibrium</term> represents a state of balance. For example, in chemistry, an equilibrium in a chemical reaction means that there is a balance between the reaction rates that create a chemical and those that use the chemical. It is not that nothing is happening, but that the creation and loss are perfectly balanced.</p>
    
    <p>A population can also be in equilibrium if the sources of all growth in the population is exactly balanced by the sources of all loss. That is, the rate of birth and immigration in a population would need to be exactly balanced by the rate of death and emigration. The effect of this balance is that the sequence is constant, namely that <me>P_{n+1} = P_n.</me></p>
    
    <p>When a population is modeled by a projection function, <m>P_{n+1} = f(P_n)</m>, we can test whether an equilibrium is possible by seeing whether the equation <m>x=f(x)</m> has any solutions. That is, since <m>P_{n+1}=P_n</m> is true for an equilibrium, we are looking for all values of <m>x</m> that might be used for the sequence <m>P_n=x</m>. We call solutions to the equation <m>x=f(x)</m> the <term>fixed points</term> of the function <m>f(x)</m>.</p>
    
    <example>
        <statement>
            <p>Recall that Newton's method for finding the square root <m>\sqrt{a}</m> introduced the projection function <me>f(x) = \frac{x}{2} + \frac{a}{2x}.</me> Find all of the fixed points for this function.</p>
        </statement>
        <solution>
            <p>We are solving the fixed point equation <m>x=f(x)</m> which becomes <me>x = \frac{x}{2} + \frac{a}{2x}.</me> Solving this equation by hand corresponds to the following steps. <md>
                <mrow>x = \frac{x}{2} + \frac{a}{2x}</mrow>
                <mrow>\frac{x}{2} = \frac{a}{2x}</mrow>
                <mrow>x^2 = a</mrow>
                <mrow>x=\pm \sqrt{a}</mrow>
            </md> So the fixed points are the positive and negative square roots of <m>a</m>.</p>
        </solution>
    </example>

    <example>
        <statement>
            <p>A population has a per capita net growth rate that linearly decreases with the population, <me>r(P) = 0.12 - 0.0004 P.</me> Find the projection function and identify possible equilibria for this population.</p>
        </statement>
        <solution>
            <p>The per capita net growth rate is related to the change in the population through births and deaths: <m>B-D = r(P) \cdot P</m>. As a difference equation, the population can be modeled as <me>P_{n+1} - P_n = r(P_n) \cdot P_n.</me> Using the given formula for <m>r(P)</m>, we can rewrite our model in recursive form as <md>
                <mrow>P_{n+1} &amp;= P_n + r(P_n) \cdot P_n</mrow>
                <mrow> &amp;= P_n + (0.12 - 0.0004 P_n) P_n</mrow>
                <mrow> &amp;= 1.12 P_n - 0.0004 P_n^2.</mrow>
            </md> A projection function corresponds to the function in the equation <m>P_{n+1}=f(P_n)</m>, which we can recognize in this problem involves <me>f(x) = 1.12x - 0.0004x^2.</me></p>
            <p>The fixed point equation <m>x=f(x)</m> allows us to find all fixed points (and therefore possible equilibria of the population). We solve the equation by factoring: <md>
            <mrow>x = 1.12x - 0.0004 x^2</mrow>
            <mrow>0 = 0.12x-0.0004x^2</mrow>
            <mrow>x(0.12 - 0.0004x) = 0</mrow>
            </md> By factoring an equation equal to zero, we find either <m>x=0</m> (a fixed point) or <m>0.12-0.0004x=0</m> (a simpler equation to find another fixed point). The other fixed point is <m>x=\frac{0.12}{0.0004} = 300</m>. So the possible equilibria for this population model are the values <m>P=0</m> or <m>P=300</m>. (Notice how we interpreted in the context of the state variable <m>P</m> rather than the fixed point variable <m>x</m>.)</p>
        </solution>
    </example>
    
    <p>A sequence that start at a fixed point will lead to a constant sequence, holding steady at the same value indefinitely. Otherwise, it is not certain what will happen. Whether a sequence converges to a fixed point depends on whether the fixed point is stable or unstable. When a fixed point is <term>stable</term>, a sequence that starts sufficiently close to the fixed point will always converge to the fixed point. Often, the sequence does not need to start very close at all to converge to a stable fixed point. However, an <term>unstable</term> fixed point results in a sequence that moves further away from the fixed point instead. We will learn methods of classifying fixed points as stable or unstable later. For now, we will just look at the values of a sequence and see if they converge or not.</p>
</subsection>

<subsection xml:id='projection-computation'>
    <title>Computing Recursive Sequences</title>
    
    <p>In order to explore our models, we need to compute the values of the sequences we are studying. We recruit our computers to do the work for us. One approach is to use a spreadsheet. We create a table for our sequence. The first entry in our table is the initial value of the sequence. Then we use cell formulas to compute the next sequence value in the cell below the initial value. So long as the formula is the same at each step, we can then copy our formula down and additional values will be automatically generated.</p>
    
    <p>A better approach is to use a scriptable computational tool. In other words, we will program the computer to generate our sequences. One such tool is the online computational tool Sage. Sage is similar to Mathematica or Maple but is available for free. We can even embed a Sage cell directly in the online text, as shown below. The online version allows us to edit the cell to adjust the formulas to match any problem that we want.</p>
    
    <p>The default entry for the script below corresponds to Newton's method with <m>a=3</m>. Notice how quickly the sequence converges to the fixed point at <m>x^*=\sqrt{3} \approx 1.73205</m>. This informs us that <m>x^*=\sqrt{3}</m> is a stable fixed point. What happens if you start close to the other fixed point at <m>x^*=-\sqrt{3} \approx -1.73205</m>?</p>
    
    <sage>
        <input>
        # This is a comment (ignored by the computer)
        # Initial value is assigned and projection function is defined
        u = 5               # initial value
        f(x) = x/2+1.5/x    # projection function
        nMax = 20           # number of terms to compute
        
        # Create an empty list (using brackets) where to store sequence
        uSeq = []
        # Repeat in a loop the calculation of the sequence values
        for n in range(nMax):
            # The indentation is essential in loops:
            # Repeats everything indented this level
            # Append the current sequence value to the end of our list
            uSeq.append(u)
            # Calculate the new value and use it for next current value
            u = f(u)
        # No longer indented, so nothing below is repeated.
        # To do below after the loop is complete.
        # Display the values of the sequence (new loop)
        for n in range(len(uSeq)):
            # This command is a formatted print command in python
            # %d means to display an integer
            # \t means to add a tab
            # %10.8f means to display a floating point value with 8 decimals
            # The values in parentheses are the numbers to be displayed
            print("%d\t%10.8f" % (n,uSeq[n]))
        # Create a plot of the sequence values.
        # Putting dollar signs around the labels formats as math (LaTeX)
        list_plot(uSeq, figsize=[5,3], axes_labels=["$n$","$u_n$"])
        </input>
    </sage>

    <p>Here is the same script without any comments, just so that you can see there aren't that many steps. It is good practice to use comments to explain what your code is doing. Try modifying the script to learn how the different steps affect the overall results. <ul>
    <li>use a different projection function</li>
    <li>use a different initial value</li>
    <li>change the number of terms calculated</li>
    <li>change the number of decimal places shown</li>
    <li>change the <c>figsize</c> option on the <c>list_plot</c></li>
    </ul></p>
    
    <sage>
        <input>
        u = 5
        f(x) = x/2+1.5/x
        nMax = 20
        uSeq = []
        for n in range(nMax):
            uSeq.append(u)
            u = f(u)
        
        for n in range(len(uSeq)):
            print("%d\t%10.8f" % (n,uSeq[n]))
        list_plot(uSeq, figsize=[5,3], axes_labels=["$n$","$u_n$"])
        </input>
    </sage>
</subsection>
</section>